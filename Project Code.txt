Project Code
Tables
CREATE DATABASE event_management;
CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  first_name VARCHAR(50) NOT NULL,
  last_name VARCHAR(50) NOT NULL,
  email VARCHAR(100) UNIQUE NOT NULL,
  phone VARCHAR(20),
  password VARCHAR(255) NOT NULL,
is_active BOOLEAN DEFAULT TRUE,
);
CREATE TABLE admins (
  id INT AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(50) UNIQUE,
  password VARCHAR(10) NOT NULL
);
CREATE TABLE events (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT,
  name VARCHAR(100),
  description TEXT,
  category_id INT,
  venue_id INT,
  start_date DATE,
  end_date DATE,
FOREIGN KEY (category_id) REFERENCES categories(id),
  start_time TIME,
  end_time TIME,
  organizer_id INT,
  vendor_id INT,
  visibility ENUM('public', 'private'),
  max_attendees INT,
  ticket_price DECIMAL(10,2),
  budget DECIMAL(10,2),
  FOREIGN KEY (user_id) REFERENCES users(id),
  FOREIGN KEY (organizer_id) REFERENCES organizers(id),
FOREIGN KEY (vendor_id) REFERENCES vendors(id),
  FOREIGN KEY (venue_id) REFERENCES venues(id),
created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
CREATE TABLE categories (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL UNIQUE
);
CREATE TABLE venues (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  location TEXT NOT NULL
);
CREATE TABLE vendors (
  id INT AUTO_INCREMENT PRIMARY KEY,
  first_name VARCHAR(50) NOT NULL,
  last_name VARCHAR(50) NOT NULL,
  service TEXT,
  phone VARCHAR(20),
  email VARCHAR(100) UNIQUE,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
CREATE TABLE organizers (
  id INT AUTO_INCREMENT PRIMARY KEY,
  first_name VARCHAR(50) NOT NULL,
  last_name VARCHAR(50) NOT NULL,
  company TEXT,
  phone VARCHAR(20),
  email VARCHAR(100) UNIQUE,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
CREATE TABLE payments (
  id INT AUTO_INCREMENT PRIMARY KEY,
  amount DECIMAL(10, 2),
  paid_on DATETIME DEFAULT CURRENT_TIMESTAMP,
method ENUM('card', 'cash', 'upi', 'paypal') DEFAULT 'card',
event_id INT,
FOREIGN KEY (event_id) REFERENCES events(id)
);
CREATE TABLE feedback (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT,
  event_id INT,
  comment TEXT,
  rating INT,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

										index.html


<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>EveM-Bringing your events to life with seamless management</title>
  <link rel="icon" type="image/png" href="assets/icon.png">
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .slide {
      transition: opacity 1s ease-in-out;
    }
    .nav-btn {
      background-color: rgba(0, 0, 0, 0.5);
      color: white;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background-color 0.3s;
    }
    .nav-btn:hover {
      background-color: rgba(0, 0, 0, 0.75);
    }
  </style>
</head>

<!-- Navbar -->
<header class="bg-white shadow sticky top-0 z-50">
  <div class="container mx-auto px-4 py-4 flex justify-between items-center">

    <!-- Logo + Title -->
    <a href="index.html" class="flex items-center space-x-2 text-2xl font-bold text-indigo-600">
      <img src="assets/icon.png" alt="EveM Logo" class="h-8 w-8">
      <span>EveM</span>
    </a>

    <!-- Navigation Links -->
    <nav class="hidden md:flex space-x-6 text-gray-700 font-medium">
      <a href="index.html" class="hover:text-indigo-600">Home</a>
      <a href="create-event.html" class="hover:text-indigo-600">Event</a>
      <a href="about.html" class="hover:text-indigo-600">About</a>
    </nav>
    <script>
      window.addEventListener("DOMContentLoaded", () => {
        const loginContainer = document.querySelector("#loginButton");
        const admin = JSON.parse(localStorage.getItem("admin"));
        const user = JSON.parse(localStorage.getItem("user"));

        if (admin && loginContainer) {
          loginContainer.innerHTML = `
        <div class="relative">
          <button onclick="toggleDropdown()" class="bg-red-600 text-white px-4 py-2 rounded-full flex items-center space-x-2">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 10a4 4 0 100-8 4 4 0 000 8zm-7 8a7 7 0 0114 0H3z" />
            </svg>
            <span>${admin.username}</span>
          </button>
          <div id="dropdownMenu" class="hidden absolute right-0 mt-2 w-48 bg-white border rounded shadow-md z-50">
            <a href="admin-dashboard.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Admin Dashboard</a>
            <a href="#" onclick="logoutAdmin()" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Logout</a>
          </div>
        </div>
      `;
        } else if (user && loginContainer) {
          loginContainer.innerHTML = `
        <div class="relative">
          <button onclick="toggleDropdown()" class="bg-indigo-600 text-white px-4 py-2 rounded-full flex items-center space-x-2">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 10a4 4 0 100-8 4 4 0 000 8zm-7 8a7 7 0 0114 0H3z" />
            </svg>
            <span>${user.first_name}</span>
          </button>
          <div id="dropdownMenu" class="hidden absolute right-0 mt-2 w-48 bg-white border rounded shadow-md z-50">
            <a href="user-dashboard.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">User Dashboard</a>
            <a href="#" onclick="logoutUser()" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Logout</a>
          </div>
        </div>
      `;
        }
      });

      function logoutAdmin() {
        localStorage.removeItem("admin");
        location.href = "index.html";
      }

      function logoutUser() {
        localStorage.removeItem("user");
        location.href = "index.html";
      }

      function toggleDropdown() {
        const menu = document.getElementById("dropdownMenu");
        if (menu) menu.classList.toggle("hidden");
      }

      // Close on outside click
      document.addEventListener("click", function (e) {
        const dropdown = document.getElementById("dropdownMenu");
        const button = e.target.closest("button");
        if (dropdown && !dropdown.contains(e.target) && !button) {
          dropdown.classList.add("hidden");
        }
      });
    </script>
    <!-- Search Box -->
    <div class="relative hidden md:flex">
      <input type="text" placeholder="Search "
        class="border-2 border-indigo-500 rounded-full pl-10 pr-4 py-2 text-gray-700 w-64 focus:outline-none focus:ring-2 focus:ring-indigo-400" />
      <svg class="absolute left-3 top-3 text-gray-500 w-4 h-4" fill="none" stroke="currentColor" stroke-width="2"
        viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-4.35-4.35M17 11a6 6 0 11-12 0 6 6 0 0112 0z" />
      </svg>
    </div>

    <!-- Login/Signup Dropdown -->
    <div class="relative" id="loginButton">
      <button onclick="toggleDropdown()"
        class="bg-indigo-600 text-white px-4 py-2 rounded-full hover:bg-indigo-700 flex items-center space-x-2">
        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
          <path d="M10 10a4 4 0 100-8 4 4 0 000 8zm-7 8a7 7 0 0114 0H3z" />
        </svg>
        <span>Log In / Sign Up</span>
      </button>
      <div id="dropdownMenu" class="hidden absolute right-0 mt-2 w-48 bg-white border rounded shadow-md z-50">
        <a href="login-user.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">User Login</a>
        <a href="login-admin.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Admin Login</a>
        <a href="signup.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Sign Up</a>
      </div>
    </div>
  </div>
</header>

<!-- Dropdown Toggle Script -->
<script>
  function toggleDropdown() {
    const dropdown = document.getElementById("dropdownMenu");
    dropdown.classList.toggle("hidden");
  }

  // Optional: Close dropdown when clicking outside
  document.addEventListener("click", function (e) {
    const dropdown = document.getElementById("dropdownMenu");
    const button = e.target.closest("button");
    if (!dropdown.contains(e.target) && !button) {
      dropdown.classList.add("hidden");
    }
  });
</script>

<div class="relative w-full mx-auto h-[450px] overflow-hidden bg-pink-200 rounded-xl" id="slider">
  <!-- Slides will be inserted here by JavaScript -->

  <!-- Navigation arrows - matching your original style -->
  <div class="absolute inset-0 flex items-center justify-between px-4">
    <button id="prevBtn" class="nav-btn">❮</button>
    <button id="nextBtn" class="nav-btn">❯</button>
  </div>

  <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2" id="dots">
  </div>
</div>

<script>
  // original slide data
  const slides = [
    { src: "assets/b (4).jpg", title: "CELEBRATION", subtitle: "PARTIES" },
    { src: "assets/b (1).jpg", title: "CORPORATE-OFFICE", subtitle: "MEETINGS" },
    { src: "assets/b (2).jpg", title: "FAMILY", subtitle: "GATHERINGS" },
    { src: "assets/b (3).jpg", title: "ART & WINE NIGHT", subtitle: "CREATIVE FUN" },
    { src: "assets/b (5).jpg", title: "DANCE PARTY", subtitle: "FEEL THE BEAT" },
    { src: "assets/b (6).jpg", title: "COFFEE MEETUP", subtitle: "NEW FRIENDS" }
  ];

  // original slider logic
  let currentSlide = 0;
  let interval;
  const slider = document.getElementById('slider');
  const dotsContainer = document.getElementById('dots');

  // Create slides - original structure
  slides.forEach((slide, index) => {
    const slideDiv = document.createElement('div');
    slideDiv.className = `slide absolute inset-0 ${index === 0 ? 'opacity-100' : 'opacity-0'}`;
    slideDiv.innerHTML = `
        <img src="${slide.src}" alt="Slide ${index + 1}" class="w-full h-full object-cover rounded-xl" />
        <!-- Your original title/subtitle positioning and styling -->
        <div class="absolute top-1/4 left-10 bg-red-600 text-white px-4 py-2 text-lg font-bold rounded-md">${slide.title}</div>
        <div class="absolute top-1/3 left-10 bg-white text-red-600 px-4 py-2 text-lg font-bold rounded-md">${slide.subtitle}</div>
      `;
    slider.insertBefore(slideDiv, slider.firstChild);
  });

  // Create dots - original style
  slides.forEach((_, index) => {
    const dot = document.createElement('button');
    dot.className = `h-3 w-3 rounded-full transition-all ${index === 0 ? 'bg-white' : 'bg-gray-400'}`;
    dot.addEventListener('click', () => goToSlide(index));
    dotsContainer.appendChild(dot);
  });

  // Navigation functions - original
  function goToSlide(index) {
    const slides = document.querySelectorAll('.slide');
    const dots = document.querySelectorAll('#dots button');

    slides.forEach(slide => slide.style.opacity = '0');
    dots.forEach(dot => dot.className = 'h-3 w-3 rounded-full transition-all bg-gray-400');

    slides[index].style.opacity = '100';
    dots[index].className = 'h-3 w-3 rounded-full transition-all bg-white';
    currentSlide = index;

    clearInterval(interval);
    startInterval();
  }

  function nextSlide() {
    goToSlide((currentSlide + 1) % slides.length);
  }

  function prevSlide() {
    goToSlide((currentSlide - 1 + slides.length) % slides.length);
  }

  function startInterval() {
    interval = setInterval(nextSlide, 5000);
  }

  // Event listeners - original
  document.getElementById('nextBtn').addEventListener('click', nextSlide);
  document.getElementById('prevBtn').addEventListener('click', prevSlide);

  // Close dropdown if clicked outside - original
  window.addEventListener("click", function (e) {
    const dropdown = document.getElementById("dropdown");
    if (!e.target.closest("button") && !e.target.closest("#dropdown")) {
      dropdown?.classList.add("hidden");
    }
  });

  // Start the slider - original
  startInterval();
</script>

<!-- Hero Slider Section -->
<section class="bg-indigo-600 text-white text-center py-16">
  <h2 class="text-4xl font-bold mb-4">Your Event, Perfectly Managed</h2>
  <p class="text-lg mb-6">From weddings to conferences, we help you plan, budget, and deliver excellence.</p>
  <a href="create-event.html" class="bg-white text-indigo-600 px-6 py-2 rounded font-medium hover:bg-gray-100">Create
    Your Event</a>
</section>

<!-- Upcoming Events -->
<section class="bg-gray-100 py-8">
  <div class="container mx-auto px-4">
    <h3 class="text-3xl font-bold mb-10 text-center text-gray-800">
      Upcoming Events
    </h3>

    <div class="grid gap-8 md:grid-cols-3">
      <div
        class="bg-white p-6 rounded-lg shadow-md transform transition-all duration-300 hover:shadow-lg hover:scale-[1.02]">
        <div class="text-4xl mb-3">🎉</div>
        <h4 class="text-xl font-semibold text-gray-800 mb-1">Music Fest 2025</h4>
        <p class="text-indigo-600 font-medium mb-3">January 2025</p>
        <p class="text-gray-600 text-sm">Join us for a day of live music and entertainment from top artists.</p>
      </div>

      <div
        class="bg-white p-6 rounded-lg shadow-md transform transition-all duration-300 hover:shadow-lg hover:scale-[1.02]">
        <div class="text-4xl mb-3">🎓</div>
        <h4 class="text-xl font-semibold text-gray-800 mb-1">Graduation Ceremony</h4>
        <p class="text-indigo-600 font-medium mb-3">February 2025</p>
        <p class="text-gray-600 text-sm">A special event to celebrate the achievements of our talented graduates.</p>
      </div>

      <div
        class="bg-white p-6 rounded-lg shadow-md transform transition-all duration-300 hover:shadow-lg hover:scale-[1.02]">
        <div class="text-4xl mb-3">💍</div>
        <h4 class="text-xl font-semibold text-gray-800 mb-1">Bridal Expo</h4>
        <p class="text-indigo-600 font-medium mb-3">March 2025</p>
        <p class="text-gray-600 text-sm">Find everything you need to plan your perfect wedding day.</p>
      </div>
    </div>
  </div>
</section>

<div class="relative w-full px-6">
  <h2 class="text-3xl text-center font-bold mb-4">Top destinations</h2>
  <div class="flex items-center relative">
    <button id="scrollLeft" class="absolute left-0 bg-white p-3 rounded-full shadow-md z-10" disabled>
      ◀
    </button>
    <div class="flex gap-6 overflow-hidden w-full px-16">
      <div id="carousel" class="flex gap-6 transition-transform duration-500" style="transform: translateX(0)">
        <div class="relative w-80 rounded-xl overflow-hidden shadow-lg flex-shrink-0 group">
          <img src="assets/orlando.jpg" alt="Orlando" class="w-full h-56 object-cover" />
          <div
            class="absolute bottom-0 left-0 right-0 bg-red-300 h-1 transition-all duration-300 group-hover:h-12 group-hover:bg-gradient-to-t p-4">
            <h2 class="text-white font-bold text-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300">
              Orlando
            </h2>
          </div>
        </div>
        <div class="relative w-80 rounded-xl overflow-hidden shadow-lg flex-shrink-0 group">
          <img src="assets/c (1).jpg" alt="Philadelphia" class="w-full h-56 object-cover" />
          <div
            class="absolute bottom-0 left-0 right-0 bg-red-300 h-1 transition-all duration-300 group-hover:h-12 group-hover:bg-gradient-to-t p-4">
            <h2 class="text-white font-bold text-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300">
              Philadelphia
            </h2>
          </div>
        </div>
        <div class="relative w-80 rounded-xl overflow-hidden shadow-lg flex-shrink-0 group">
          <img src="assets/c (2).jpg" alt="San Diego" class="w-full h-56 object-cover" />
          <div
            class="absolute bottom-0 left-0 right-0 bg-red-300 h-1 transition-all duration-300 group-hover:h-12 group-hover:bg-gradient-to-t p-4">
            <h2 class="text-white font-bold text-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300">
              San Diego
            </h2>
          </div>
        </div>
        <div class="relative w-80 rounded-xl overflow-hidden shadow-lg flex-shrink-0 group">
          <img src="assets/c (3).jpg" alt="New York" class="w-full h-56 object-cover" />
          <div
            class="absolute bottom-0 left-0 right-0 bg-red-300 h-1 transition-all duration-300 group-hover:h-12 group-hover:bg-gradient-to-t p-4">
            <h2 class="text-white font-bold text-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300">
              New York
            </h2>
          </div>
        </div>
        <div class="relative w-80 rounded-xl overflow-hidden shadow-lg flex-shrink-0 group">
          <img src="assets/c (4).jpg" alt="Los Angeles" class="w-full h-56 object-cover" />
          <div
            class="absolute bottom-0 left-0 right-0 bg-red-300 h-1 transition-all duration-300 group-hover:h-12 group-hover:bg-gradient-to-t p-4">
            <h2 class="text-white font-bold text-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300">
              Los Angeles
            </h2>
          </div>
        </div>
        <div class="relative w-80 rounded-xl overflow-hidden shadow-lg flex-shrink-0 group">
          <img src="assets/c (5).jpg" alt="Chicago" class="w-full h-56 object-cover" />
          <div
            class="absolute bottom-0 left-0 right-0 bg-red-300 h-1 transition-all duration-300 group-hover:h-12 group-hover:bg-gradient-to-t p-4">
            <h2 class="text-white font-bold text-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300">
              Chicago
            </h2>
          </div>
        </div>
        <div class="relative w-80 rounded-xl overflow-hidden shadow-lg flex-shrink-0 group">
          <img src="assets/c (6).jpg" alt="Miami" class="w-full h-56 object-cover" />
          <div
            class="absolute bottom-0 left-0 right-0 bg-red-300 h-1 transition-all duration-300 group-hover:h-12 group-hover:bg-gradient-to-t p-4">
            <h2 class="text-white font-bold text-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300">
              Miami
            </h2>
          </div>
        </div>
        <div class="relative w-80 rounded-xl overflow-hidden shadow-lg flex-shrink-0 group">
          <img src="assets/c (7).jpg" alt="Seattle" class="w-full h-56 object-cover" />
          <div
            class="absolute bottom-0 left-0 right-0 bg-red-300 h-1 transition-all duration-300 group-hover:h-12 group-hover:bg-gradient-to-t p-4">
            <h2 class="text-white font-bold text-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300">
              Seattle
            </h2>
          </div>
        </div>
      </div>
    </div>
    <button id="scrollRight" class="absolute right-0 bg-white p-3 rounded-full shadow-md z-10">
      ▶
    </button>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    let index = 0;
    const carousel = document.getElementById('carousel');
    const scrollLeftBtn = document.getElementById('scrollLeft');
    const scrollRightBtn = document.getElementById('scrollRight');

    function updateButtons() {
      scrollLeftBtn.disabled = index === 0;
      scrollRightBtn.disabled = index + 4 >= 8; // 8 is the total number of destinations
    }

    scrollLeftBtn.addEventListener('click', () => {
      if (index > 0) {
        index -= 4;
        carousel.style.transform = `translateX(-${index * 21}rem)`;
        updateButtons();
      }
    });

    scrollRightBtn.addEventListener('click', () => {
      if (index + 4 < 8) {
        index += 4;
        carousel.style.transform = `translateX(-${index * 21}rem)`;
        updateButtons();
      }
    });

    // Initialize button states
    updateButtons();
  });
</script>

<!-- Why Choose Us -->
<section class="container mx-auto px-4 py-12">
  <h3 class="text-2xl font-semibold mb-6 text-center">Why Choose EveM?</h3>
  <div class="grid md:grid-cols-3 gap-6 text-center">
    <div class="bg-white p-6 rounded shadow hover:shadow-md">✅ Simple Event Tools</div>
    <div class="bg-white p-6 rounded shadow hover:shadow-md">🤝 Vendor & Venue Access</div>
    <div class="bg-white p-6 rounded shadow hover:shadow-md">📊 Budget Tracking</div>
  </div>
</section>

<!-- Sponsors Section -->
<section class="py-10 px-6 text-center bg-gray-50">
  <h2 class="text-3xl font-bold mb-6">Our Sponsors</h2>
  <div class="flex flex-wrap justify-center gap-6">
    <!-- Sponsor 1 -->
    <div class="w-64 p-4 bg-white shadow-md rounded-lg text-center">
      <img src="assets/d (2).jpg" alt="Red Bull" class="w-24 h-24 mx-auto rounded-full object-cover" />
      <h3 class="text-lg font-semibold mt-3">Red Bull</h3>
    </div>

    <!-- Sponsor 2 -->
    <div class="w-64 p-4 bg-white shadow-md rounded-lg text-center">
      <img src="assets/d (1).jpg" alt="Nike" class="w-24 h-24 mx-auto rounded-full object-cover" />
      <h3 class="text-lg font-semibold mt-3">Nike</h3>
    </div>

    <!-- Sponsor 3 -->
    <div class="w-64 p-4 bg-white shadow-md rounded-lg text-center">
      <img src="assets/d (4).jpg" alt="Spotify" class="w-24 h-24 mx-auto rounded-full object-cover" />
      <h3 class="text-lg font-semibold mt-3">Spotify</h3>
    </div>

    <!-- Sponsor 4 -->
    <div class="w-64 p-4 bg-white shadow-md rounded-lg text-center">
      <img src="assets/d (3).jpg" alt="Tesla" class="w-24 h-24 mx-auto rounded-full object-cover" />
      <h3 class="text-lg font-semibold mt-3">Tesla</h3>
    </div>
  </div>
</section>


<!--News-->
<section class="w-[98%] mx-auto py-10 bg-gray-100">
  <h2 class="text-3xl font-bold text-center text-gray-800 mb-8">Blog & News</h2>
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
    <!-- Blog Post 1 -->
    <article class="bg-white rounded-2xl shadow-lg hover:shadow-2xl transition-shadow duration-300 p-6">
      <h3 class="text-2xl font-semibold text-blue-600 hover:text-blue-800 transition-colors duration-300 mb-3">
        <a href="/blog/top-10-tips-for-successful-event-planning">Top 10 Tips for Successful Event Planning</a>
      </h3>
      <p class="text-sm text-gray-500 mb-2">October 1, 2023</p>
      <p class="text-gray-700 mb-4">Discover the essential tips to make your event a success.</p>
      <a href="/blog/top-10-tips-for-successful-event-planning"
        class="text-blue-600 font-semibold hover:text-blue-800 transition-colors duration-300">Read More</a>
    </article>

    <!-- Blog Post 2 -->
    <article class="bg-white rounded-2xl shadow-lg hover:shadow-2xl transition-shadow duration-300 p-6">
      <h3 class="text-2xl font-semibold text-blue-600 hover:text-blue-800 transition-colors duration-300 mb-3">
        <a href="/blog/how-to-choose-the-perfect-venue">How to Choose the Perfect Venue for Your Event</a>
      </h3>
      <p class="text-sm text-gray-500 mb-2">September 25, 2023</p>
      <p class="text-gray-700 mb-4">Learn how to select the best venue that fits your event needs.</p>
      <a href="/blog/how-to-choose-the-perfect-venue"
        class="text-blue-600 font-semibold hover:text-blue-800 transition-colors duration-300">Read More</a>
    </article>

    <!-- Blog Post 3 -->
    <article class="bg-white rounded-2xl shadow-lg hover:shadow-2xl transition-shadow duration-300 p-6">
      <h3 class="text-2xl font-semibold text-blue-600 hover:text-blue-800 transition-colors duration-300 mb-3">
        <a href="/blog/latest-trends-in-corporate-event-management">The Latest Trends in Corporate Event Management</a>
      </h3>
      <p class="text-sm text-gray-500 mb-2">September 18, 2023</p>
      <p class="text-gray-700 mb-4">Stay updated with the latest trends in corporate events.</p>
      <a href="/blog/latest-trends-in-corporate-event-management"
        class="text-blue-600 font-semibold hover:text-blue-800 transition-colors duration-300">Read More</a>
    </article>
  </div>
  <div class="text-center mt-12 bg-white p-6 rounded-2xl shadow-lg">
    <p class="text-lg text-gray-700 mb-4">Enjoyed our articles? <a href="/subscribe"
        class="text-blue-600 font-semibold hover:text-blue-800">Subscribe</a> to our blog for more updates!</p>
    <div class="flex justify-center space-x-6 mt-4">
      <a href="https://facebook.com" class="text-gray-600 hover:text-blue-600 transition-colors duration-300">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
          stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"></path>
        </svg>
      </a>
      <a href="https://twitter.com" class="text-gray-600 hover:text-blue-600 transition-colors duration-300">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
          stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path
            d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z">
          </path>
        </svg>
      </a>
      <a href="https://linkedin.com" class="text-gray-600 hover:text-blue-600 transition-colors duration-300">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
          stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path>
          <rect x="2" y="9" width="4" height="12"></rect>
          <circle cx="4" cy="4" r="2"></circle>
        </svg>
      </a>
    </div>
  </div>
</section>

<!-- Footer -->
<footer class="bg-blue-500 text-white p-10">
  <div class="grid grid-cols-2 md:grid-cols-4 gap-8">
    <div>
      <h4 class="font-bold mb-2">Use EveM</h4>
      <ul class="space-y-1">
        <li><a href="/createevent" class="hover:underline">Create Events</a></li>
        <li><a href="#" class="hover:underline">Pricing</a></li>
        <li><a href="#" class="hover:underline">Event Marketing</a></li>
        <li><a href="#" class="hover:underline">Mobile Ticket App</a></li>
      </ul>
    </div>
    <div>
      <h4 class="font-bold mb-2">Plan Events</h4>
      <ul class="space-y-1">
        <li><a href="#" class="hover:underline">Sell Tickets Online</a></li>
        <li><a href="#" class="hover:underline">Event Planning</a></li>
        <li><a href="#" class="hover:underline">Virtual Events</a></li>
        <li><a href="#" class="hover:underline">QR Codes for Check-In</a></li>
      </ul>
    </div>
    <div>
      <h4 class="font-bold mb-2">Find Events</h4>
      <ul class="space-y-1">
        <li><a href="#" class="hover:underline">New York Events</a></li>
        <li><a href="#" class="hover:underline">Chicago Events</a></li>
        <li><a href="#" class="hover:underline">Los Angeles Events</a></li>
        <li><a href="#" class="hover:underline">Washington Events</a></li>
      </ul>
    </div>
    <div>
      <h4 class="font-bold mb-2">Connect With Us</h4>
      <ul class="flex space-x-4">
        <li>
          <a href="https://x.com/AsifJahan16?t=395gkNQRy6uxrRdKF3HqVQ&s=09" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="fill-current">
              <path
                d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z">
              </path>
            </svg>
          </a>
        </li>
        <li>
          <a href="https://www.facebook.com/aasif.jahan.9/" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="fill-current">
              <path
                d="M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z">
              </path>
            </svg>
          </a>
        </li>
        <li>
          <a href="https://www.instagram.com/__aasiif__/" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="fill-current">
              <path
                d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z">
              </path>
            </svg>
          </a>
        </li>
        <li>
          <a href="https://www.linkedin.com/in/asif748?utm_source=share&utm_campaign=share_via&utm_content=profile&utm_medium=android_app"
            target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="fill-current">
              <path d="M16 3h-9v4h9zm0 5h-9v4h9zm0 5h-9v4h9zm0 5h-9v4h9z"></path>
            </svg>
          </a>
        </li>
      </ul>
    </div>
  </div>
  <div class="mt-8 text-center text-sm">
    <script>
      document.write(`© ${new Date().getFullYear()} EveM Events Ltd. All rights reserved.`);
    </script>
    <p>Bringing your events to life with seamless management</p>
  </div>


</footer>
</body>
</html>

									create-event.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Create Event | EveM</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 text-gray-800">
  <header class="bg-white shadow sticky top-0 z-50">
  <div class="container mx-auto px-4 py-4 flex justify-between items-center">

    <!-- Logo + Title -->
    <a href="index.html" class="flex items-center space-x-2 text-2xl font-bold text-indigo-600">
      <img src="assets/icon.png" alt="EveM Logo" class="h-8 w-8">
      <span>EveM</span>
    </a>

    <!-- Navigation Links -->
    <nav class="hidden md:flex space-x-6 text-gray-700 font-medium">
      <a href="index.html" class="hover:text-indigo-600">Home</a>
      <a href="create-event.html" class="hover:text-indigo-600">Event</a>
      <a href="about.html" class="hover:text-indigo-600">About</a>
    </nav>
    <script>
      window.addEventListener("DOMContentLoaded", () => {
        const loginContainer = document.querySelector("#loginButton");
        const admin = JSON.parse(localStorage.getItem("admin"));
        const user = JSON.parse(localStorage.getItem("user"));

        if (admin && loginContainer) {
          loginContainer.innerHTML = `
        <div class="relative">
          <button onclick="toggleDropdown()" class="bg-red-600 text-white px-4 py-2 rounded-full flex items-center space-x-2">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 10a4 4 0 100-8 4 4 0 000 8zm-7 8a7 7 0 0114 0H3z" />
            </svg>
            <span>${admin.username}</span>
          </button>
          <div id="dropdownMenu" class="hidden absolute right-0 mt-2 w-48 bg-white border rounded shadow-md z-50">
            <a href="admin-dashboard.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Admin Dashboard</a>
            <a href="#" onclick="logoutAdmin()" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Logout</a>
          </div>
        </div>
      `;
        } else if (user && loginContainer) {
          loginContainer.innerHTML = `
        <div class="relative">
          <button onclick="toggleDropdown()" class="bg-indigo-600 text-white px-4 py-2 rounded-full flex items-center space-x-2">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 10a4 4 0 100-8 4 4 0 000 8zm-7 8a7 7 0 0114 0H3z" />
            </svg>
            <span>${user.first_name}</span>
          </button>
          <div id="dropdownMenu" class="hidden absolute right-0 mt-2 w-48 bg-white border rounded shadow-md z-50">
            <a href="user-dashboard.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Dashboard</a>
            <a href="#" onclick="logoutUser()" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Logout</a>
          </div>
        </div>
      `;
        }
      });

      function logoutAdmin() {
        localStorage.removeItem("admin");
        location.href = "index.html";
      }

      function logoutUser() {
        localStorage.removeItem("user");
        location.href = "index.html";
      }

      function toggleDropdown() {
        const menu = document.getElementById("dropdownMenu");
        if (menu) menu.classList.toggle("hidden");
      }

      // Close on outside click
      document.addEventListener("click", function (e) {
        const dropdown = document.getElementById("dropdownMenu");
        const button = e.target.closest("button");
        if (dropdown && !dropdown.contains(e.target) && !button) {
          dropdown.classList.add("hidden");
        }
      });
    </script>
    <!-- Search Box -->
    <div class="relative hidden md:flex">
      <input type="text" placeholder="Search "
        class="border-2 border-indigo-500 rounded-full pl-10 pr-4 py-2 text-gray-700 w-64 focus:outline-none focus:ring-2 focus:ring-indigo-400" />
      <svg class="absolute left-3 top-3 text-gray-500 w-4 h-4" fill="none" stroke="currentColor" stroke-width="2"
        viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-4.35-4.35M17 11a6 6 0 11-12 0 6 6 0 0112 0z" />
      </svg>
    </div>

    <!-- Login/Signup Dropdown -->
    <div class="relative" id="loginButton">
      <button onclick="toggleDropdown()"
        class="bg-indigo-600 text-white px-4 py-2 rounded-full hover:bg-indigo-700 flex items-center space-x-2">
        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
          <path d="M10 10a4 4 0 100-8 4 4 0 000 8zm-7 8a7 7 0 0114 0H3z" />
        </svg>
        <span>Log In / Sign Up</span>
      </button>
      <div id="dropdownMenu" class="hidden absolute right-0 mt-2 w-48 bg-white border rounded shadow-md z-50">
        <a href="login-user.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">User Login</a>
        <a href="login-admin.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Admin Login</a>
        <a href="signup.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Sign Up</a>
      </div>
    </div>
  </div>


</header>
  <section class="container mx-auto px-4 py-10 max-w-3xl">
    <h2 class="text-4xl font-bold text-center text-indigo-700 mb-6">Create a New Event</h2>
    <div class="bg-white p-6 rounded-xl shadow-lg border border-indigo-200 mb-8">
      <h3 class="text-xl font-semibold mb-3">Steps to Create an Event</h3>
      <ul class="list-disc pl-6 text-gray-700 space-y-1">
        <li>Log in to your EveM account</li>
        <li>Fill in all required event details</li>
        <li>Submit your event</li>
        <li>Manage it from your dashboard</li>
      </ul>
    </div>

    <div id="eventContent"></div>
  </section>
  <footer class="bg-blue-500 text-white p-10">
  <div class="grid grid-cols-2 md:grid-cols-4 gap-8">
    <div>
      <h4 class="font-bold mb-2">Use EveM</h4>
      <ul class="space-y-1">
        <li><a href="/createevent" class="hover:underline">Create Events</a></li>
        <li><a href="#" class="hover:underline">Pricing</a></li>
        <li><a href="#" class="hover:underline">Event Marketing</a></li>
        <li><a href="#" class="hover:underline">Mobile Ticket App</a></li>
      </ul>
    </div>
    <div>
      <h4 class="font-bold mb-2">Plan Events</h4>
      <ul class="space-y-1">
        <li><a href="#" class="hover:underline">Sell Tickets Online</a></li>
        <li><a href="#" class="hover:underline">Event Planning</a></li>
        <li><a href="#" class="hover:underline">Virtual Events</a></li>
        <li><a href="#" class="hover:underline">QR Codes for Check-In</a></li>
      </ul>
    </div>
    <div>
      <h4 class="font-bold mb-2">Find Events</h4>
      <ul class="space-y-1">
        <li><a href="#" class="hover:underline">New York Events</a></li>
        <li><a href="#" class="hover:underline">Chicago Events</a></li>
        <li><a href="#" class="hover:underline">Los Angeles Events</a></li>
        <li><a href="#" class="hover:underline">Washington Events</a></li>
      </ul>
    </div>
    <div>
      <h4 class="font-bold mb-2">Connect With Us</h4>
      <ul class="flex space-x-4">
        <li>
          <a href="https://x.com/AsifJahan16?t=395gkNQRy6uxrRdKF3HqVQ&s=09" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="fill-current">
              <path
                d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z">
              </path>
            </svg>
          </a>
        </li>
        <li>
          <a href="https://www.facebook.com/aasif.jahan.9/" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="fill-current">
              <path
                d="M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z">
              </path>
            </svg>
          </a>
        </li>
        <li>
          <a href="https://www.instagram.com/__aasiif__/" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="fill-current">
              <path
                d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z">
              </path>
            </svg>
          </a>
        </li>
        <li>
          <a href="https://www.linkedin.com/in/asif748?utm_source=share&utm_campaign=share_via&utm_content=profile&utm_medium=android_app"
            target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="fill-current">
              <path d="M16 3h-9v4h9zm0 5h-9v4h9zm0 5h-9v4h9zm0 5h-9v4h9z"></path>
            </svg>
          </a>
        </li>
      </ul>
    </div>
  </div>
  <div class="mt-8 text-center text-sm">
    <script>
      document.write(`© ${new Date().getFullYear()} EveM Events Ltd. All rights reserved.`);
    </script>
    <p>Bringing your events to life with seamless management</p>
  </div>
</footer>
</body>
</html>
								about.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>About & Contact | EveM</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 text-gray-800">

  <!-- Navbar -->
<header class="bg-white shadow sticky top-0 z-50">
  <div class="container mx-auto px-4 py-4 flex justify-between items-center">

    <!-- Logo + Title -->
    <a href="index.html" class="flex items-center space-x-2 text-2xl font-bold text-indigo-600">
      <img src="assets/icon.png" alt="EveM Logo" class="h-8 w-8">
      <span>EveM</span>
    </a>

    <!-- Navigation Links -->
    <nav class="hidden md:flex space-x-6 text-gray-700 font-medium">
      <a href="index.html" class="hover:text-indigo-600">Home</a>
      <a href="create-event.html" class="hover:text-indigo-600">Event</a>
      <a href="about.html" class="hover:text-indigo-600">About</a>
    </nav>
    <script>
      window.addEventListener("DOMContentLoaded", () => {
        const loginContainer = document.querySelector("#loginButton");
        const admin = JSON.parse(localStorage.getItem("admin"));
        const user = JSON.parse(localStorage.getItem("user"));

        if (admin && loginContainer) {
          loginContainer.innerHTML = `
        <div class="relative">
          <button onclick="toggleDropdown()" class="bg-red-600 text-white px-4 py-2 rounded-full flex items-center space-x-2">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 10a4 4 0 100-8 4 4 0 000 8zm-7 8a7 7 0 0114 0H3z" />
            </svg>
            <span>${admin.username}</span>
          </button>
          <div id="dropdownMenu" class="hidden absolute right-0 mt-2 w-48 bg-white border rounded shadow-md z-50">
            <a href="admin-dashboard.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Admin Dashboard</a>
            <a href="#" onclick="logoutAdmin()" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Logout</a>
          </div>
        </div>
      `;
        } else if (user && loginContainer) {
          loginContainer.innerHTML = `
        <div class="relative">
          <button onclick="toggleDropdown()" class="bg-indigo-600 text-white px-4 py-2 rounded-full flex items-center space-x-2">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 10a4 4 0 100-8 4 4 0 000 8zm-7 8a7 7 0 0114 0H3z" />
            </svg>
            <span>${user.first_name}</span>
          </button>
          <div id="dropdownMenu" class="hidden absolute right-0 mt-2 w-48 bg-white border rounded shadow-md z-50">
            <a href="user-dashboard.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Dashboard</a>
            <a href="#" onclick="logoutUser()" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Logout</a>
          </div>
        </div>
      `;
        }
      });

      function logoutAdmin() {
        localStorage.removeItem("admin");
        location.href = "index.html";
      }

      function logoutUser() {
        localStorage.removeItem("user");
        location.href = "index.html";
      }

      function toggleDropdown() {
        const menu = document.getElementById("dropdownMenu");
        if (menu) menu.classList.toggle("hidden");
      }

      // Close on outside click
      document.addEventListener("click", function (e) {
        const dropdown = document.getElementById("dropdownMenu");
        const button = e.target.closest("button");
        if (dropdown && !dropdown.contains(e.target) && !button) {
          dropdown.classList.add("hidden");
        }
      });
    </script>
    <!-- Search Box -->
    <div class="relative hidden md:flex">
      <input type="text" placeholder="Search "
        class="border-2 border-indigo-500 rounded-full pl-10 pr-4 py-2 text-gray-700 w-64 focus:outline-none focus:ring-2 focus:ring-indigo-400" />
      <svg class="absolute left-3 top-3 text-gray-500 w-4 h-4" fill="none" stroke="currentColor" stroke-width="2"
        viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-4.35-4.35M17 11a6 6 0 11-12 0 6 6 0 0112 0z" />
      </svg>
    </div>

    <!-- Login/Signup Dropdown -->
    <div class="relative" id="loginButton">
      <button onclick="toggleDropdown()"
        class="bg-indigo-600 text-white px-4 py-2 rounded-full hover:bg-indigo-700 flex items-center space-x-2">
        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
          <path d="M10 10a4 4 0 100-8 4 4 0 000 8zm-7 8a7 7 0 0114 0H3z" />
        </svg>
        <span>Log In / Sign Up</span>
      </button>
      <div id="dropdownMenu" class="hidden absolute right-0 mt-2 w-48 bg-white border rounded shadow-md z-50">
        <a href="login-user.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">User Login</a>
        <a href="login-admin.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Admin Login</a>
        <a href="signup.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Sign Up</a>
      </div>
    </div>
  </div>


</header>

<!-- Dropdown Toggle Script -->
<script>
  function toggleDropdown() {
    const dropdown = document.getElementById("dropdownMenu");
    dropdown.classList.toggle("hidden");
  }

  // Optional: Close dropdown when clicking outside
  document.addEventListener("click", function (e) {
    const dropdown = document.getElementById("dropdownMenu");
    const button = e.target.closest("button");
    if (!dropdown.contains(e.target) && !button) {
      dropdown.classList.add("hidden");
    }
  });
</script>

  <!-- About Section -->
  <section class="container mx-auto px-4 py-12 max-w-3xl">
    <h2 class="text-3xl font-semibold mb-4 text-center">About EveM</h2>
    <p class="text-lg mb-6 text-center">
      EveM is a modern event planning and management platform that empowers users to create, customize, and launch events of any kind — seamlessly and professionally.
    </p>
    <ul class="list-disc pl-6 text-gray-700">
      <li>🔧 Easy-to-use Event Builder</li>
      <li>📊 Budget Tracking & Reports</li>
      <li>🧍 Role-Based User Access</li>
      <li>🧾 Organizer & Vendor Integration</li>
      <li>🌐 Public or Private Event Hosting</li>
    </ul>
  </section>
 <!-- User Ratings -->
  <section class="container mx-auto px-4 py-10">
    <h3 class="text-xl font-semibold mb-4 text-center">Our Users Love Us</h3>
    <div class="flex flex-wrap justify-center gap-4">
      <div class="bg-white p-4 rounded shadow w-80 text-center">
        ⭐⭐⭐⭐☆ <br> "Super easy to use and saved us tons of time!"
      </div>
      <div class="bg-white p-4 rounded shadow w-80 text-center">
        ⭐⭐⭐⭐⭐ <br> "Amazing service and great support team!"
      </div>
    </div>
  </section>
  <!-- Contact Section -->
  <section class="bg-indigo-100 py-12">
    <div class="container mx-auto px-4 max-w-2xl">
      <h3 class="text-2xl font-semibold mb-4 text-center">Get in Touch</h3>
      <form action="/api/contact" method="POST" class="bg-white p-6 rounded shadow space-y-4">
        <input type="text" name="name" required placeholder="Your Name" class="w-full border px-4 py-2 rounded" />
        <input type="email" name="email" required placeholder="Your Email" class="w-full border px-4 py-2 rounded" />
        <textarea name="message" required placeholder="Your Message" class="w-full border px-4 py-2 rounded"></textarea>
        <button type="submit" class="bg-indigo-600 text-white px-6 py-2 rounded hover:bg-indigo-700">Send Message</button>
      </form>
      <p class="text-center text-gray-600 text-sm mt-6">Or email us at: <strong>contact@evem.com</strong></p>
    </div>
  </section>

  <!-- Footer -->
  <footer class="bg-blue-500 text-white p-10">
  <div class="grid grid-cols-2 md:grid-cols-4 gap-8">
    <div>
      <h4 class="font-bold mb-2">Use EveM</h4>
      <ul class="space-y-1">
        <li><a href="/createevent" class="hover:underline">Create Events</a></li>
        <li><a href="#" class="hover:underline">Pricing</a></li>
        <li><a href="#" class="hover:underline">Event Marketing</a></li>
        <li><a href="#" class="hover:underline">Mobile Ticket App</a></li>
      </ul>
    </div>
    <div>
      <h4 class="font-bold mb-2">Plan Events</h4>
      <ul class="space-y-1">
        <li><a href="#" class="hover:underline">Sell Tickets Online</a></li>
        <li><a href="#" class="hover:underline">Event Planning</a></li>
        <li><a href="#" class="hover:underline">Virtual Events</a></li>
        <li><a href="#" class="hover:underline">QR Codes for Check-In</a></li>
      </ul>
    </div>
    <div>
      <h4 class="font-bold mb-2">Find Events</h4>
      <ul class="space-y-1">
        <li><a href="#" class="hover:underline">New York Events</a></li>
        <li><a href="#" class="hover:underline">Chicago Events</a></li>
        <li><a href="#" class="hover:underline">Los Angeles Events</a></li>
        <li><a href="#" class="hover:underline">Washington Events</a></li>
      </ul>
    </div>
    <div>
      <h4 class="font-bold mb-2">Connect With Us</h4>
      <ul class="flex space-x-4">
        <li>
          <a href="https://x.com/AsifJahan16?t=395gkNQRy6uxrRdKF3HqVQ&s=09" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="fill-current">
              <path d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"></path>
            </svg>
          </a>
        </li>
        <li>
          <a href="https://www.facebook.com/aasif.jahan.9/" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="fill-current">
              <path d="M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z"></path>
            </svg>
          </a>
        </li>
        <li>
          <a href="https://www.instagram.com/__aasiif__/" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="fill-current">
              <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"></path>
            </svg>
          </a>
        </li>
        <li>
          <a href="https://www.linkedin.com/in/asif748?utm_source=share&utm_campaign=share_via&utm_content=profile&utm_medium=android_app" target="_blank" rel="noopener noreferrer">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="fill-current">
              <path d="M16 3h-9v4h9zm0 5h-9v4h9zm0 5h-9v4h9zm0 5h-9v4h9z"></path>
            </svg>
          </a>
        </li>
      </ul>
    </div>
  </div>
  <div class="mt-8 text-center text-sm">
    <script>
      document.write(`© ${new Date().getFullYear()} EveM Events Ltd. All rights reserved.`);
    </script>
    <p>Bringing your events to life with seamless management</p>
  </div>
</footer>
</body>
</html>
									login-user.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Login | EveM</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 p-8 text-gray-800">
  <div class="max-w-md mx-auto bg-white shadow p-6 rounded">
    <h2 class="text-2xl font-bold mb-4 text-center">User Login</h2>
    <form id="loginForm" class="space-y-4">
      <input id="email" type="email" placeholder="Email" class="w-full border p-2 rounded" required />
      <input id="password" type="password" placeholder="Password" class="w-full border p-2 rounded" required />
      <button type="submit" class="w-full bg-indigo-600 text-white p-2 rounded">Login</button>
    </form>
    <p id="loginMessage" class="text-center mt-4 text-sm text-red-600"></p>
    <p class="text-center mt-2 text-sm">Don't have an account? <a href="signup.html" class="text-indigo-600 underline">Sign up</a></p>
  </div>

  <script>
  document.getElementById("loginForm").addEventListener("submit", async function (e) {
    e.preventDefault();

    const data = {
      email: document.getElementById("email").value,
      password: document.getElementById("password").value
    };

    try {
      const res = await fetch("http://localhost:3000/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data)
      });

      if (res.ok) {
        const result = await res.json();
        localStorage.setItem("user", JSON.stringify(result.user));
        alert("Login successful!");
        window.location.href = "user-dashboard.html";
      } else {
        // Try to read error message text (plain text response)
        const errMsg = await res.text();
        document.getElementById("loginMessage").textContent = errMsg || "Login failed.";
      }
    } catch (error) {
      console.error("Login error:", error);
      document.getElementById("loginMessage").textContent = "An error occurred. Please try again.";
    }
  });
</script>
</body>
</html>
							signup.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Sign Up | EveM</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 p-8 text-gray-800">
  <div class="max-w-md mx-auto bg-white shadow p-6 rounded">
    <h2 class="text-2xl font-bold mb-4 text-center">Sign Up</h2>
    <form id="signupForm" class="space-y-4">
      <input id="first_name" type="text" placeholder="First Name" class="w-full border p-2 rounded" required />
      <input id="last_name" type="text" placeholder="Last Name" class="w-full border p-2 rounded" required />
      <input id="email" type="email" placeholder="Email" class="w-full border p-2 rounded" required />
      <input id="phone" type="text" placeholder="Phone" class="w-full border p-2 rounded" />
      <input id="password" type="password" placeholder="Password" class="w-full border p-2 rounded" required />
      <input id="confirm_password" type="password" placeholder="Confirm Password" class="w-full border p-2 rounded" required />

      

      <button type="submit" class="w-full bg-indigo-600 text-white p-2 rounded">Sign Up</button>
    </form>
    <p id="signupMessage" class="text-center mt-4 text-sm text-red-600"></p>
  </div>

  
  <script>
  document.getElementById("signupForm").addEventListener("submit", async function (e) {
    e.preventDefault();

    const password = document.getElementById("password").value;
    const confirmPassword = document.getElementById("confirm_password").value;

    if (password !== confirmPassword) {
      alert("Passwords do not match.");
      return;
    }

    const data = {
      first_name: document.getElementById("first_name").value,
      last_name: document.getElementById("last_name").value,
      email: document.getElementById("email").value,
      phone: document.getElementById("phone").value,
      password: password
    };

    try {
      const res = await fetch("http://localhost:3000/signup", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data)
      });

      const msg = await res.text();
      document.getElementById("signupMessage").textContent = msg;

      if (res.ok) {
        alert("Signup successful! Please login.");
        window.location.href = "login-user.html";
      }
    } catch (error) {
      console.error("Error during signup:", error);
      alert("An error occurred. Please try again.");
    }
  });
</script>


</body>
</html>
							user-dashboard.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <title>User Dashboard | EveM</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom styles for card hover effect */
        .dashboard-card {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .dashboard-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }
        .dashboard-card-disabled {
            cursor: not-allowed;
            opacity: 0.7;
        }
    </style>
</head>

<body class="bg-gray-100 text-gray-800">

    <!-- ✅ Navigation Bar -->
    <header class="bg-white shadow sticky top-0 z-50">
        <div class="container mx-auto px-4 py-4 flex justify-between items-center">

            <!-- Logo + Title -->
            <a href="index.html" class="flex items-center space-x-2 text-2xl font-bold text-indigo-600">
                <img src="assets/icon.png" alt="EveM Logo" class="h-8 w-8">
                <span>EveM</span>
            </a>

            <!-- Navigation Links -->
            <nav class="hidden md:flex space-x-6 text-gray-700 font-medium">
                <a href="index.html" class="hover:text-indigo-600">Home</a>
                <a href="create-event.html" class="hover:text-indigo-600">Event</a>
                <a href="about.html" class="hover:text-indigo-600">About</a>
            </nav>
            <script>
                window.addEventListener("DOMContentLoaded", () => {
                    const loginContainer = document.querySelector("#loginButton");
                    const admin = JSON.parse(localStorage.getItem("admin"));
                    const user = JSON.parse(localStorage.getItem("user"));

                    if (admin && loginContainer) {
                        loginContainer.innerHTML = `
        <div class="relative">
          <button onclick="toggleDropdown()" class="bg-red-600 text-white px-4 py-2 rounded-full flex items-center space-x-2">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 10a4 4 0 100-8 4 4 0 000 8zm-7 8a7 7 0 0114 0H3z" />
            </svg>
            <span>${admin.username}</span>
          </button>
          <div id="dropdownMenu" class="hidden absolute right-0 mt-2 w-48 bg-white border rounded shadow-md z-50">
            <a href="admin-dashboard.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Admin Dashboard</a>
            <a href="#" onclick="logoutAdmin()" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Logout</a>
          </div>
        </div>
      `;
                    } else if (user && loginContainer) {
                        loginContainer.innerHTML = `
        <div class="relative">
          <button onclick="toggleDropdown()" class="bg-indigo-600 text-white px-4 py-2 rounded-full flex items-center space-x-2">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 10a4 4 0 100-8 4 4 0 000 8zm-7 8a7 7 0 0114 0H3z" />
            </svg>
            <span>${user.first_name}</span>
          </button>
          <div id="dropdownMenu" class="hidden absolute right-0 mt-2 w-48 bg-white border rounded shadow-md z-50">
            <a href="user-dashboard.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">User Dashboard</a>
            <a href="#" onclick="logoutUser()" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Logout</a>
          </div>
        </div>
      `;
                    }
                });

                function logoutAdmin() {
                    localStorage.removeItem("admin");
                    location.href = "index.html";
                }

                function logoutUser() {
                    localStorage.removeItem("user");
                    location.href = "index.html";
                }

                function toggleDropdown() {
                    const menu = document.getElementById("dropdownMenu");
                    if (menu) menu.classList.toggle("hidden");
                }

                // Close on outside click
                document.addEventListener("click", function (e) {
                    const dropdown = document.getElementById("dropdownMenu");
                    const button = e.target.closest("button");
                    if (dropdown && !dropdown.contains(e.target) && !button) {
                        dropdown.classList.add("hidden");
                    }
                });
            </script>
            <!-- Search Box -->
            <div class="relative hidden md:flex">
                <input type="text" placeholder="Search "
                    class="border-2 border-indigo-500 rounded-full pl-10 pr-4 py-2 text-gray-700 w-64 focus:outline-none focus:ring-2 focus:ring-indigo-400" />
                <svg class="absolute left-3 top-3 text-gray-500 w-4 h-4" fill="none" stroke="currentColor"
                    stroke-width="2" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round"
                        d="M21 21l-4.35-4.35M17 11a6 6 0 11-12 0 6 6 0 0112 0z" />
                </svg>
            </div>

            <!-- Login/Signup Dropdown -->
            <div class="relative" id="loginButton">
                <button onclick="toggleDropdown()"
                    class="bg-indigo-600 text-white px-4 py-2 rounded-full hover:bg-indigo-700 flex items-center space-x-2">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M10 10a4 4 0 100-8 4 4 0 000 8zm-7 8a7 7 0 0114 0H3z" />
                    </svg>
                    <span>Log In / Sign Up</span>
                </button>
                <div id="dropdownMenu" class="hidden absolute right-0 mt-2 w-48 bg-white border rounded shadow-md z-50">
                    <a href="login-user.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">User
                        Login</a>
                    <a href="login-admin.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Admin
                        Login</a>
                    <a href="signup.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Sign Up</a>
                </div>
            </div>
        </div>


    </header>
    <header class="bg-blue-600 text-white px-6 py-4 flex justify-between items-center">
        <h1 class="text-xl font-bold">User Dashboard</h1>
        <a href="index.html" class="text-sm bg-white text-blue-600 px-3 py-1 rounded">View Site</a>
    </header>


    <main class="flex-grow container mx-auto px-6 py-8">
        <section id="welcomeSection" class="text-center py-6">
            <h2 class="text-3xl font-extrabold text-indigo-800">Welcome, <span id="userFirstName"></span>!</h2>
            <p class="text-gray-600 mt-2 text-md">What would you like to do today?</p>
        </section>

        <div id="dashboardCards" class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-8 mt-6 max-w-6xl mx-auto">
            <div onclick="loadEventForm()"
                class="dashboard-card cursor-pointer bg-white p-8 rounded-2xl shadow-lg text-center flex flex-col items-center justify-center border-b-4 border-indigo-500">
                <svg class="w-16 h-16 text-indigo-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                <h3 class="text-2xl font-bold text-indigo-700 mb-2">Create Event</h3>
                <p class="text-gray-500 text-sm">Start organizing your event from scratch.</p>
            </div>

            <div onclick="loadUpdateEventSelector()"
                class="dashboard-card cursor-pointer bg-white p-8 rounded-2xl shadow-lg text-center flex flex-col items-center justify-center border-b-4 border-indigo-500">
                <svg class="w-16 h-16 text-indigo-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z">
                    </path>
                </svg>
                <h3 class="text-2xl font-bold text-indigo-700 mb-2">Update Event</h3>
                <p class="text-gray-500 text-sm">Modify details of an existing event.</p>
            </div>

            <div onclick="loadPaymentEventSelector()"
                class="dashboard-card cursor-pointer bg-white p-8 rounded-2xl shadow-lg text-center flex flex-col items-center justify-center border-b-4 border-yellow-500">
                <svg class="w-16 h-16 text-yellow-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M12 8c-2.485 0-4 1.5-4 3.5 0 2.477 2.5 4.5 5 4.5s5-2.023 5-4.5c0-2-1.515-3.5-4-3.5z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M12 19l4.243 4.243a1 1 0 001.414 0l.707-.707a1 1 0 000-1.414L12 17.586m0 1.414l-4.243 4.243a1 1 0 01-1.414 0l-.707-.707a1 1 0 010-1.414L12 17.586">
                    </path>
                </svg>
                <h3 class="text-2xl font-bold text-yellow-600 mb-2">Make Payment</h3>
                <p class="text-gray-500 text-sm">Pay for services related to your events.</p>
            </div>

            <!-- New: Give Feedback Card -->
            <div onclick="loadFeedbackForm()"
                class="dashboard-card cursor-pointer bg-white p-8 rounded-2xl shadow-lg text-center flex flex-col items-center justify-center border-b-4 border-purple-500">
                <svg class="w-16 h-16 text-purple-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M7 8h10M7 12h10M7 16h10M12 4v16m-7-7h14"></path>
                </svg>
                <h3 class="text-2xl font-bold text-purple-700 mb-2">Give Feedback</h3>
                <p class="text-gray-500 text-sm">Share your thoughts on an event.</p>
            </div>

            <!-- New: View Receipts Card -->
            <div onclick="loadReceiptsList()"
                class="dashboard-card cursor-pointer bg-white p-8 rounded-2xl shadow-lg text-center flex flex-col items-center justify-center border-b-4 border-green-500">
                <svg class="w-16 h-16 text-green-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z">
                    </path>
                </svg>
                <h3 class="text-2xl font-bold text-green-700 mb-2">View Receipts</h3>
                <p class="text-gray-500 text-sm">See all your payment receipts.</p>
            </div>

        </div>

        <div id="eventFormContainer" class="max-w-3xl mx-auto px-4 mt-10 hidden"></div>
        <div id="updateEventContainer" class="max-w-3xl mx-auto px-4 mt-10 hidden"></div>
        <div id="paymentEventSelectorContainer" class="max-w-3xl mx-auto px-4 mt-10 hidden"></div>
        <div id="paymentFormContainer" class="max-w-md mx-auto px-4 mt-10 hidden"></div>
        <div id="receiptContainer" class="max-w-md mx-auto px-4 mt-10 hidden"></div>
        <!-- New: Feedback Form Container -->
        <div id="feedbackContainer" class="max-w-3xl mx-auto px-4 mt-10 hidden"></div>
        <!-- New: Receipts List Container -->
        <div id="receiptsListContainer" class="max-w-3xl mx-auto px-4 mt-10 hidden"></div>
    </main>

    <script>
        window.addEventListener("DOMContentLoaded", () => {
            const user = JSON.parse(localStorage.getItem("user"));
            if (!user) window.location.href = "login-user.html";

            document.getElementById("userFirstName").textContent = user.first_name;

            // Login Button Setup
            const loginContainer = document.getElementById("loginButton");
            loginContainer.innerHTML = `<div class="relative">
          <button onclick="toggleDropdown()" class="bg-indigo-600 text-white px-4 py-2 rounded-full flex items-center space-x-2 hover:bg-indigo-700 transition-colors">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 10a4 4 0 100-8 4 4 0 000 8zm-7 8a7 7 0 0114 0H3z" />
            </svg>
            <span>${user.first_name}</span>
          </button>
          <div id="dropdownMenu" class="hidden absolute right-0 mt-2 w-48 bg-white border rounded shadow-md z-50">
            <a href="#" onclick="logoutUser()" class="block px-4 py-3 text-sm text-gray-700 hover:bg-gray-100">Logout</a>
          </div>
        </div>`;
        });

        function logoutUser() {
            localStorage.removeItem("user");
            window.location.href = "index.html";
        }

        function toggleDropdown() {
            const menu = document.getElementById("dropdownMenu");
            if (menu) menu.classList.toggle("hidden");
        }

        function goBackToDashboard() {
            document.getElementById("welcomeSection").classList.remove("hidden");
            document.getElementById("dashboardCards").classList.remove("hidden");
            document.getElementById("eventFormContainer").classList.add("hidden");
            document.getElementById("paymentFormContainer").classList.add("hidden");
            document.getElementById("updateEventContainer").classList.add("hidden");
            document.getElementById("paymentEventSelectorContainer").classList.add("hidden");
            document.getElementById("receiptContainer").classList.add("hidden");
            document.getElementById("feedbackContainer").classList.add("hidden"); // New
            document.getElementById("receiptsListContainer").classList.add("hidden"); // New
        }

        // Helper function to populate dropdowns
        async function populateDropdown(selectId, apiUrl, primaryField, secondaryField = null, tertiaryField = null) {
            const selectElement = document.getElementById(selectId);
            try {
                const response = await fetch(apiUrl);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const items = await response.json();

                // Clear existing options, keeping the default "Select..." option
                selectElement.innerHTML = '<option value="">Select ' + selectId.replace('Id', '') + '</option>';

                items.forEach(item => {
                    const option = document.createElement('option');
                    option.value = item.id;
                    let text = item[primaryField];
                    if (secondaryField && item[secondaryField]) {
                        text += ` ${item[secondaryField]}`;
                    }
                    if (tertiaryField && item[tertiaryField]) {
                        text += ` (${item[tertiaryField]})`;
                    }
                    option.textContent = text;
                    selectElement.appendChild(option);
                });
            } catch (error) {
                console.error(`Error populating ${selectId}:`, error);

            }
        }


        function loadEventForm() {
            document.getElementById("welcomeSection").classList.add("hidden");
            document.getElementById("dashboardCards").classList.add("hidden");
            const container = document.getElementById("eventFormContainer");
            container.classList.remove("hidden");
            container.innerHTML = `
        <button onclick="goBackToDashboard()" class="mb-6 flex items-center space-x-2 text-gray-600 hover:text-indigo-600 transition">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path></svg>
          <span>Back to Dashboard</span>
        </button>
        <form id="eventForm" class="bg-white p-8 rounded-xl shadow-lg space-y-6 border border-gray-200">
          <h2 class="text-3xl font-bold text-indigo-700 mb-4 text-center">Create New Event</h2>
          <input type="hidden" name="userId" value="${JSON.parse(localStorage.getItem("user")).id}" />
          <input type="text" name="name" required placeholder="Event Name"
            class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" />
          <textarea name="description" required placeholder="Event Description"
            class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"></textarea>

          <div class="grid md:grid-cols-2 gap-4">
            <div>
              <label for="startDate" class="block mb-1 text-sm font-medium text-gray-700">Start Date</label>
              <input type="date" id="startDate" name="startDate" required class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" />
            </div>
            <div>
              <label for="startTime" class="block mb-1 text-sm font-medium text-gray-700">Start Time</label>
              <input type="time" id="startTime" name="startTime" required class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" />
            </div>
          </div>

          <div class="grid md:grid-cols-2 gap-4">
            <div>
              <label for="endDate" class="block mb-1 text-sm font-medium text-gray-700">End Date</label>
              <input type="date" id="endDate" name="endDate" required class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" />
            </div>
            <div>
              <label for="endTime" class="block mb-1 text-sm font-medium text-gray-700">End Time</label>
              <input type="time" id="endTime" name="endTime" required class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" />
            </div>
          </div>

          <select id="categoryId" name="categoryId" required class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
            <option value="">Select Category</option>
          </select>

          <select id="organizerId" name="organizerId" required class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
            <option value="">Select Organizer</option>
          </select>

          <select id="vendorId" name="vendorId" class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
            <option value="">Select Vendor</option>
          </select>

          <select id="venueId" name="venueId" required class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
            <option value="">Select Venue</option>
          </select>

          <div class="grid md:grid-cols-2 gap-4">
            <input type="number" name="maxAttendees" placeholder="Max Attendees"
              class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" />
            <input type="number" name="ticketPrice" placeholder="Ticket Price"
              class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" />
          </div>

          <div class="grid md:grid-cols-2 gap-4">
            <input type="number" id="budget" name="budget" placeholder="Estimated Budget"
              class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" />
            <input type="text" id="budgetEst" placeholder="Live Estimate"
              class="w-full border px-4 py-3 bg-gray-100 text-gray-500 rounded-lg" readonly />
          </div>

          <div>
            <label class="block mb-2 text-sm text-gray-600 font-medium">Visibility</label>
            <div class="flex items-center space-x-4">
              <label class="flex items-center"><input type="radio" name="visibility" value="public" checked class="form-radio text-indigo-600" /> <span class="ml-2">Public</span></label>
              <label class="flex items-center"><input type="radio" name="visibility" value="private" class="form-radio text-indigo-600" /> <span class="ml-2">Private</span></label>
            </div>
          </div>

          <button type="submit"
            class="bg-indigo-600 text-white w-full px-6 py-3 rounded-lg hover:bg-indigo-700 transition font-semibold">
            Submit Event
          </button>
        </form>
      `;

            const budgetInput = document.getElementById("budget");
            const budgetEst = document.getElementById("budgetEst");

            budgetInput.addEventListener("input", () => {
                const val = parseFloat(budgetInput.value) || 0;
                budgetEst.value = "$" + (val * 1.15).toFixed(2) + " (incl. 15% buffer)";
            });

            // Fetch and populate dropdowns
            populateDropdown('categoryId', 'http://localhost:3000/categories', 'name');
            populateDropdown('organizerId', 'http://localhost:3000/organizers', 'first_name', 'last_name', 'company');
            populateDropdown('vendorId', 'http://localhost:3000/vendors', 'first_name', 'last_name', 'service');
            populateDropdown('venueId', 'http://localhost:3000/venues', 'name', 'location');


            document.getElementById("eventForm").addEventListener("submit", async function (e) {
                e.preventDefault();
                const formData = new FormData(this);
                const data = Object.fromEntries(formData.entries());

                try {
                    const res = await fetch("http://localhost:3000/events", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(data),
                    });

                    if (res.ok) {
                        alert("Event created successfully!");
                        window.location.href = "user-dashboard.html";
                    } else {
                        const err = await res.json();
                        alert("Failed to create event: " + err.message);
                    }
                } catch (err) {
                    alert("Error submitting event.");
                    console.error(err);
                }
            });
        }

        // New function to load a selector for events to update
        async function loadUpdateEventSelector() {
            document.getElementById("welcomeSection").classList.add("hidden");
            document.getElementById("dashboardCards").classList.add("hidden");
            const container = document.getElementById("updateEventContainer");
            container.classList.remove("hidden");
            container.innerHTML = `
                <button onclick="goBackToDashboard()" class="mb-6 flex items-center space-x-2 text-gray-600 hover:text-indigo-600 transition">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path></svg>
                    <span>Back to Dashboard</span>
                </button>
                <h2 class="text-3xl font-bold text-indigo-700 mb-6 text-center">Select an Event to Update</h2>
                <div id="eventList" class="space-y-4"></div>
            `;

            const user = JSON.parse(localStorage.getItem("user"));
            const eventList = document.getElementById("eventList");
            try {
                const response = await fetch(`http://localhost:3000/events/user/${user.id}`);
                if (!response.ok) throw new Error("Failed to fetch events.");
                const events = await response.json();

                if (events.length === 0) {
                    eventList.innerHTML = `<p class="text-center text-gray-500">You have no events to update. Create one first!</p>`;
                } else {
                    events.forEach(event => {
                        const eventCard = document.createElement('div');
                        eventCard.className = 'bg-white p-6 rounded-lg shadow cursor-pointer hover:bg-gray-50 transition-colors';
                        eventCard.innerHTML = `
                            <h4 class="text-xl font-semibold text-gray-800">${event.name}</h4>
                            <p class="text-gray-500 text-sm">Starts: ${new Date(event.start_date).toLocaleDateString()} at ${event.start_time}</p>
                        `;
                        eventCard.onclick = () => loadUpdateForm(event.id);
                        eventList.appendChild(eventCard);
                    });
                }
            } catch (error) {
                console.error("Error fetching events:", error);
                eventList.innerHTML = `<p class="text-center text-red-500">Error loading events. Please try again.</p>`;
            }
        }

        async function loadUpdateForm(eventId) {
            const container = document.getElementById("updateEventContainer");
            container.innerHTML = `
                <button onclick="loadUpdateEventSelector()" class="mb-6 flex items-center space-x-2 text-gray-600 hover:text-indigo-600 transition">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path></svg>
                    <span>Back to Event List</span>
                </button>
                <form id="updateEventForm" class="bg-white p-8 rounded-xl shadow-lg space-y-6 border border-gray-200"></form>
            `;

            const form = document.getElementById("updateEventForm");
            try {
                // Fetch event details
                const eventResponse = await fetch(`http://localhost:3000/events/${eventId}`);
                if (!eventResponse.ok) throw new Error("Failed to fetch event details.");
                const event = await eventResponse.json();

                form.innerHTML = `
                    <h2 class="text-3xl font-bold text-indigo-700 mb-4 text-center">Update Event: ${event.name}</h2>
                    <input type="hidden" name="id" value="${event.id}" />
                    <input type="hidden" name="userId" value="${event.user_id}" />
                    <input type="text" name="name" required placeholder="Event Name" value="${event.name}"
                        class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" />
                    <textarea name="description" required placeholder="Event Description"
                        class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">${event.description}</textarea>

                    <div class="grid md:grid-cols-2 gap-4">
                        <div>
                            <label for="startDate" class="block mb-1 text-sm font-medium text-gray-700">Start Date</label>
                            <input type="date" id="startDate" name="startDate" required value="${event.start_date.split('T')[0]}" class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" />
                        </div>
                        <div>
                            <label for="startTime" class="block mb-1 text-sm font-medium text-gray-700">Start Time</label>
                            <input type="time" id="startTime" name="startTime" required value="${event.start_time}" class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" />
                        </div>
                    </div>

                    <div class="grid md:grid-cols-2 gap-4">
                        <div>
                            <label for="endDate" class="block mb-1 text-sm font-medium text-gray-700">End Date</label>
                            <input type="date" id="endDate" name="endDate" required value="${event.end_date.split('T')[0]}" class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" />
                        </div>
                        <div>
                            <label for="endTime" class="block mb-1 text-sm font-medium text-gray-700">End Time</label>
                            <input type="time" id="endTime" name="endTime" required value="${event.end_time}" class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" />
                        </div>
                    </div>
                    
                    <select id="categoryId" name="categoryId" required class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"></select>
                    <select id="organizerId" name="organizerId" required class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"></select>
                    <select id="vendorId" name="vendorId" class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"></select>
                    <select id="venueId" name="venueId" required class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"></select>

                    <div class="grid md:grid-cols-2 gap-4">
                        <input type="number" name="maxAttendees" placeholder="Max Attendees" value="${event.max_attendees}"
                        class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" />
                        <input type="number" name="ticketPrice" placeholder="Ticket Price" value="${event.ticket_price}"
                        class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" />
                    </div>

                    <div class="grid md:grid-cols-2 gap-4">
                        <input type="number" id="budget" name="budget" placeholder="Estimated Budget" value="${event.budget}"
                        class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" />
                        <input type="text" id="budgetEst" placeholder="Live Estimate"
                        class="w-full border px-4 py-3 bg-gray-100 text-gray-500 rounded-lg" readonly />
                    </div>

                    <div>
                        <label class="block mb-2 text-sm text-gray-600 font-medium">Visibility</label>
                        <div class="flex items-center space-x-4">
                            <label class="flex items-center">
                                <input type="radio" name="visibility" value="public" ${event.visibility === 'public' ? 'checked' : ''} class="form-radio text-indigo-600" />
                                <span class="ml-2">Public</span>
                            </label>
                            <label class="flex items-center">
                                <input type="radio" name="visibility" value="private" ${event.visibility === 'private' ? 'checked' : ''} class="form-radio text-indigo-600" />
                                <span class="ml-2">Private</span>
                            </label>
                        </div>
                    </div>

                    <button type="submit"
                        class="bg-indigo-600 text-white w-full px-6 py-3 rounded-lg hover:bg-indigo-700 transition font-semibold">
                        Update Event
                    </button>
                `;

                // Repopulate all dropdowns and set the selected values
                await populateDropdown('categoryId', 'http://localhost:3000/categories', 'name');
                document.getElementById('categoryId').value = event.category_id;

                await populateDropdown('organizerId', 'http://localhost:3000/organizers', 'first_name', 'last_name', 'company');
                document.getElementById('organizerId').value = event.organizer_id;

                await populateDropdown('vendorId', 'http://localhost:3000/vendors', 'first_name', 'last_name', 'service');
                document.getElementById('vendorId').value = event.vendor_id;

                await populateDropdown('venueId', 'http://localhost:3000/venues', 'name', 'location');
                document.getElementById('venueId').value = event.venue_id;

                // Add event listener for form submission
                form.addEventListener("submit", async function (e) {
                    e.preventDefault();
                    const formData = new FormData(this);
                    const data = Object.fromEntries(formData.entries());

                    try {
                        const res = await fetch(`http://localhost:3000/events/${eventId}`, {
                            method: "PUT",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify(data),
                        });

                        if (res.ok) {
                            alert("Event updated successfully!");
                            window.location.href = "user-dashboard.html";
                        } else {
                            const err = await res.json();
                            alert("Failed to update event: " + err.message);
                        }
                    } catch (err) {
                        alert("Error updating event.");
                        console.error(err);
                    }
                });

            } catch (error) {
                console.error("Error loading update form:", error);
                container.innerHTML = `<p class="text-center text-red-500">Error loading event details. Please try again.</p>`;
            }
        }

        // New function to load a selector for events to make a payment for
        async function loadPaymentEventSelector() {
            // Corrected logic: Hide all other containers before showing this one
            document.getElementById("welcomeSection").classList.add("hidden");
            document.getElementById("dashboardCards").classList.add("hidden");
            document.getElementById("eventFormContainer").classList.add("hidden");
            document.getElementById("updateEventContainer").classList.add("hidden");
            document.getElementById("paymentFormContainer").classList.add("hidden");
            document.getElementById("receiptContainer").classList.add("hidden");
            document.getElementById("feedbackContainer").classList.add("hidden"); // New
            document.getElementById("receiptsListContainer").classList.add("hidden"); // New

            const container = document.getElementById("paymentEventSelectorContainer");
            container.classList.remove("hidden");
            container.innerHTML = `
                <button onclick="goBackToDashboard()" class="mb-6 flex items-center space-x-2 text-gray-600 hover:text-indigo-600 transition">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path></svg>
                    <span>Back to Dashboard</span>
                </button>
                <h2 class="text-3xl font-bold text-yellow-600 mb-6 text-center">Select an Event to Make a Payment For</h2>
                <div id="eventList" class="space-y-4">
                    <p class="text-center text-gray-500">Loading events...</p>
                </div>
            `;

            const user = JSON.parse(localStorage.getItem("user"));
            const eventList = document.getElementById("eventList");

            if (!user || !user.id) {
                eventList.innerHTML = `<p class="text-center text-red-500">Error: User not logged in.</p>`;
                return;
            }

            try {
                // Fetch events from the backend, which now includes the 'is_paid' status
                const response = await fetch(`http://localhost:3000/events/user/${user.id}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                const events = await response.json();
                console.log("Fetched events:", events); // Debugging log

                // Filter the events to only show the ones that have not been paid
                const unpaidEvents = events.filter(event => !event.is_paid);
                console.log("Unpaid events:", unpaidEvents); // Debugging log

                if (unpaidEvents.length === 0) {
                    eventList.innerHTML = `<p class="text-center text-gray-500">You have no pending payments. All events are paid.</p>`;
                } else {
                    // Clear the loading message before adding new content
                    eventList.innerHTML = '';
                    unpaidEvents.forEach(event => {
                        const eventCard = document.createElement('div');
                        eventCard.className = 'bg-white p-6 rounded-lg shadow flex justify-between items-center';
                        eventCard.innerHTML = `
                            <div>
                                <h4 class="text-xl font-semibold text-gray-800">${event.name}</h4>
                                <p class="text-gray-500 text-sm">Starts: ${new Date(event.start_date).toLocaleDateString()} at ${event.start_time}</p>
                            </div>
                            <button onclick="showPaymentForm(${event.id})"
                                class="bg-yellow-500 text-white px-4 py-2 rounded-lg hover:bg-yellow-600 transition font-semibold">
                                Pay Now
                            </button>
                        `;
                        eventList.appendChild(eventCard);
                    });
                }
            } catch (error) {
                console.error("Error fetching events:", error);
                eventList.innerHTML = `<p class="text-center text-red-500">Error loading events. Please ensure your backend server is running and try again.</p>`;
            }
        }

        // New function to show the actual payment form after selecting an event
        function showPaymentForm(eventId) {
            //the previous container is hidden
            document.getElementById("paymentEventSelectorContainer").classList.add("hidden");
            const container = document.getElementById("paymentFormContainer");
            container.classList.remove("hidden");

            container.innerHTML = `
                <button onclick="loadPaymentEventSelector()" class="mb-6 flex items-center space-x-2 text-gray-600 hover:text-indigo-600 transition">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path></svg>
                    <span>Back to Events</span>
                </button>
                <div class="bg-white shadow-lg p-8 rounded-xl border border-gray-200">
                    <h2 class="text-3xl font-bold text-yellow-600 text-center mb-6">Payment for Event</h2>
                    
                    <form id="paymentForm" class="space-y-6">
                        <input type="hidden" id="event_id" name="event_id" value="${eventId}" />

                        <div>
                            <label class="block mb-2 text-sm font-semibold text-gray-700">Payment Method</label>
                            <select name="method" class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500" required>
                                <option value="">-- Select Method --</option>
                                <option value="card">Card</option>
                                <option value="cash">Cash</option>
                                <option value="upi">UPI</option>
                                <option value="paypal">PayPal</option>
                            </select>
                        </div>

                        <div>
                            <label class="block mb-2 text-sm font-semibold text-gray-700">Account Info</label>
                            <input type="text" name="account_info" placeholder="e.g. John Doe, john@upi, ****1234"
                                class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500" required />
                        </div>

                        <div>
                            <label class="block mb-2 text-sm font-semibold text-gray-700">Amount</label>
                            <input type="number" name="amount" step="0.01" placeholder="Amount (e.g., 250.00)" required
                                class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500" />
                        </div>

                        <button type="submit"
                            class="bg-yellow-500 text-white w-full py-3 px-4 rounded-lg hover:bg-yellow-600 transition font-semibold">
                            Pay Now
                        </button>
                    </form>
                    <p id="paymentMessage" class="text-center mt-4 text-sm text-red-600"></p>
                </div>
            `;

            // New code to handle payment form submission
            document.getElementById("paymentForm").addEventListener("submit", async function (e) {
                e.preventDefault();
                const formData = new FormData(this);
                const data = Object.fromEntries(formData.entries());
                const paymentMessage = document.getElementById("paymentMessage");

                try {
                    const res = await fetch("http://localhost:3000/payments", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(data),
                    });

                    if (res.ok) {
                        const result = await res.json();
                        alert("Payment successful!");
                        // After success, display receipt and remove form
                        document.getElementById("paymentFormContainer").classList.add("hidden");
                        showReceipt(result.paymentId);
                    } else {
                        const err = await res.json();
                        paymentMessage.textContent = "Payment failed: " + err.message;
                        paymentMessage.className = "text-center mt-4 text-sm text-red-600";
                    }
                } catch (err) {
                    paymentMessage.textContent = "Error processing payment.";
                    paymentMessage.className = "text-center mt-4 text-sm text-red-600";
                    console.error(err);
                }
            });
        }

        // New function to display a payment receipt
        async function showReceipt(paymentId) {
            document.getElementById("welcomeSection").classList.add("hidden");
            document.getElementById("dashboardCards").classList.add("hidden");
            document.getElementById("eventFormContainer").classList.add("hidden");
            document.getElementById("updateEventContainer").classList.add("hidden");
            document.getElementById("paymentFormContainer").classList.add("hidden");
            document.getElementById("paymentEventSelectorContainer").classList.add("hidden");
            document.getElementById("feedbackContainer").classList.add("hidden"); // New
            document.getElementById("receiptsListContainer").classList.add("hidden"); // New

            const container = document.getElementById("receiptContainer");
            container.classList.remove("hidden");
            container.innerHTML = `
                <button onclick="loadReceiptsList()" class="mb-6 flex items-center space-x-2 text-gray-600 hover:text-indigo-600 transition">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path></svg>
                    <span>Back to Receipts List</span>
                </button>
                <div id="receiptContent" class="bg-white p-8 rounded-xl shadow-lg border border-gray-200 text-center">
                    <p class="text-gray-500">Loading receipt details...</p>
                </div>
            `;

            try {
                // Fetch payment details from the backend
                const response = await fetch(`http://localhost:3000/payments/${paymentId}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch payment details.');
                }
                const paymentDetails = await response.json();

                // Construct and display the receipt
                const receiptContent = document.getElementById("receiptContent");
                receiptContent.innerHTML = `
                    <h2 class="text-3xl font-bold text-green-600 mb-4">Payment Successful!</h2>
                    <p class="text-gray-700 mb-2">Thank you for your payment.</p>
                    <div class="border-t border-b border-gray-200 py-4 my-4 text-left">
                        <p class="text-lg font-semibold text-gray-800">Event: <span class="font-normal">${paymentDetails.event_name}</span></p>
                        <p class="text-lg font-semibold text-gray-800">Amount Paid: <span class="font-normal">$${parseFloat(paymentDetails.amount).toFixed(2)}</span></p>
                        <p class="text-lg font-semibold text-gray-800">Method: <span class="font-normal">${paymentDetails.method.toUpperCase()}</span></p>
                        <p class="text-lg font-semibold text-gray-800">Date: <span class="font-normal">${new Date(paymentDetails.transaction_date).toLocaleString()}</span></p>
                    </div>
                    <p class="text-sm text-gray-400">Transaction ID: ${paymentId}</p>
                `;
            } catch (error) {
                console.error("Error displaying receipt:", error);
                const receiptDetails = document.getElementById("receiptContent");
                receiptDetails.innerHTML = `<p class="text-center text-red-600">Failed to load receipt details.</p>`;
            }
        }

        // New function to load the feedback form
        async function loadFeedbackForm() {
            document.getElementById("welcomeSection").classList.add("hidden");
            document.getElementById("dashboardCards").classList.add("hidden");
            document.getElementById("eventFormContainer").classList.add("hidden");
            document.getElementById("updateEventContainer").classList.add("hidden");
            document.getElementById("paymentFormContainer").classList.add("hidden");
            document.getElementById("paymentEventSelectorContainer").classList.add("hidden");
            document.getElementById("receiptContainer").classList.add("hidden");
            document.getElementById("receiptsListContainer").classList.add("hidden");

            const container = document.getElementById("feedbackContainer");
            container.classList.remove("hidden");
            container.innerHTML = `
        <button onclick="goBackToDashboard()" class="mb-6 flex items-center space-x-2 text-gray-600 hover:text-indigo-600 transition">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/></svg>
            <span>Back to Dashboard</span>
        </button>
        <div class="bg-white shadow-lg p-8 rounded-xl border border-gray-200">
            <h2 class="text-3xl font-bold text-purple-600 text-center mb-6">Give Feedback</h2>
            
            <form id="feedbackForm" class="space-y-6">
                <input type="hidden" id="feedbackUserId" value="${JSON.parse(localStorage.getItem("user")).id}" />

                <div>
                    <label class="block mb-2 text-sm font-semibold text-gray-700">Select Event</label>
                    <select id="feedbackEventId" name="eventId" class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500">
                        <option value="">-- Select an Event (optional) --</option>
                    </select>
                </div>

                <div>
                    <label class="block mb-2 text-sm font-semibold text-gray-700">Rating (1-5)</label>
                    <input type="number" id="feedbackRating" name="rating" min="1" max="5" placeholder="e.g., 5"
                        class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500" required />
                </div>

                <div>
                    <label class="block mb-2 text-sm font-semibold text-gray-700">Comments</label>
                    <textarea id="feedbackComment" name="comment" rows="4" placeholder="Your feedback here..."
                        class="w-full border px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"></textarea>
                </div>

                <button type="submit"
                    class="bg-purple-500 text-white w-full py-3 px-4 rounded-lg hover:bg-purple-600 transition font-semibold">
                    Submit Feedback
                </button>
            </form>
            <p id="feedbackMessage" class="text-center mt-4 text-sm text-red-600"></p>
        </div>
    `;

            // Load events (optional dropdown)
            populateDropdown('feedbackEventId', `http://localhost:3000/events/user/${JSON.parse(localStorage.getItem("user")).id}`, 'name');

            document.getElementById('feedbackForm').addEventListener('submit', async function (e) {
                e.preventDefault();

                const userId = document.getElementById('feedbackUserId').value;
                const eventId = document.getElementById('feedbackEventId').value || null; // allow null
                const rating = document.getElementById('feedbackRating').value;
                const comment = document.getElementById('feedbackComment').value;
                const feedbackMessage = document.getElementById('feedbackMessage');

                try {
                    const res = await fetch('http://localhost:3000/feedback', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            user_id: userId,
                            event_id: eventId, // now nullable
                            rating: rating,
                            comment: comment
                        })
                    });

                    if (res.ok) {
                        feedbackMessage.textContent = "Feedback submitted successfully!";
                        feedbackMessage.className = "text-center mt-4 text-sm text-green-600";
                        alert("Feedback submitted successfully!");
                        document.getElementById('feedbackForm').reset();
                        goBackToDashboard();
                    } else {
                        const err = await res.json();
                        feedbackMessage.textContent = "Failed to submit feedback: " + err.message;
                        feedbackMessage.className = "text-center mt-4 text-sm text-red-600";
                    }
                } catch (err) {
                    feedbackMessage.textContent = "Error submitting feedback.";
                    feedbackMessage.className = "text-center mt-4 text-sm text-red-600";
                    console.error(err);
                }
            });
        }
        // New function to load the list of receipts
        async function loadReceiptsList() {
            document.getElementById("welcomeSection").classList.add("hidden");
            document.getElementById("dashboardCards").classList.add("hidden");
            document.getElementById("eventFormContainer").classList.add("hidden");
            document.getElementById("updateEventContainer").classList.add("hidden");
            document.getElementById("paymentFormContainer").classList.add("hidden");
            document.getElementById("paymentEventSelectorContainer").classList.add("hidden");
            document.getElementById("receiptContainer").classList.add("hidden");
            document.getElementById("feedbackContainer").classList.add("hidden");

            const container = document.getElementById("receiptsListContainer");
            container.classList.remove("hidden");
            container.innerHTML = `
                <button onclick="goBackToDashboard()" class="mb-6 flex items-center space-x-2 text-gray-600 hover:text-indigo-600 transition">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path></svg>
                    <span>Back to Dashboard</span>
                </button>
                <div class="bg-white shadow-lg p-8 rounded-xl border border-gray-200">
                    <h2 class="text-3xl font-bold text-green-600 text-center mb-6">Your Payments</h2>
                    <div id="receiptsList" class="space-y-4">
                        <p class="text-center text-gray-500">Loading your receipts...</p>
                    </div>
                </div>
            `;

            const user = JSON.parse(localStorage.getItem("user"));
            const receiptsListDiv = document.getElementById("receiptsList");

            if (!user || !user.id) {
                receiptsListDiv.innerHTML = `<p class="text-center text-red-500">Error: User not logged in.</p>`;
                return;
            }

            try {
                const response = await fetch(`http://localhost:3000/payments/user/${user.id}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                const payments = await response.json();

                if (payments.length === 0) {
                    receiptsListDiv.innerHTML = `<p class="text-center text-gray-500">You have no payment receipts yet.</p>`;
                } else {
                    receiptsListDiv.innerHTML = ''; // Clear loading message
                    payments.forEach(payment => {
                        const paymentCard = document.createElement('div');
                        paymentCard.className = 'bg-gray-50 p-4 rounded-lg shadow-sm flex justify-between items-center';
                        paymentCard.innerHTML = `
                            <div>
                                <h4 class="text-lg font-semibold text-gray-800">${payment.event_name}</h4>
                                <p class="text-sm text-gray-600">Amount: $${parseFloat(payment.amount).toFixed(2)}</p>
                                <p class="text-xs text-gray-500">Date: ${new Date(payment.transaction_date).toLocaleDateString()}</p>
                            </div>
                            <button onclick="showReceipt(${payment.id})"
                                class="bg-green-500 text-white px-3 py-1 rounded-lg hover:bg-green-600 transition font-semibold text-sm">
                                View Receipt
                            </button>
                        `;
                        receiptsListDiv.appendChild(paymentCard);
                    });
                }
            } catch (error) {
                console.error("Error fetching receipts:", error);
                receiptsListDiv.innerHTML = `<p class="text-center text-red-500">Error loading receipts. Please ensure your backend server is running and try again.</p>`;
            }
        }
    </script>
    <!-- Footer -->
    <footer class="bg-blue-500 text-white p-10">
        <div class="grid grid-cols-2 md:grid-cols-4 gap-8">
            <div>
                <h4 class="font-bold mb-2">Use EveM</h4>
                <ul class="space-y-1">
                    <li><a href="/createevent" class="hover:underline">Create Events</a></li>
                    <li><a href="#" class="hover:underline">Pricing</a></li>
                    <li><a href="#" class="hover:underline">Event Marketing</a></li>
                    <li><a href="#" class="hover:underline">Mobile Ticket App</a></li>
                </ul>
            </div>
            <div>
                <h4 class="font-bold mb-2">Plan Events</h4>
                <ul class="space-y-1">
                    <li><a href="#" class="hover:underline">Sell Tickets Online</a></li>
                    <li><a href="#" class="hover:underline">Event Planning</a></li>
                    <li><a href="#" class="hover:underline">Virtual Events</a></li>
                    <li><a href="#" class="hover:underline">QR Codes for Check-In</a></li>
                </ul>
            </div>
            <div>
                <h4 class="font-bold mb-2">Find Events</h4>
                <ul class="space-y-1">
                    <li><a href="#" class="hover:underline">New York Events</a></li>
                    <li><a href="#" class="hover:underline">Chicago Events</a></li>
                    <li><a href="#" class="hover:underline">Los Angeles Events</a></li>
                    <li><a href="#" class="hover:underline">Washington Events</a></li>
                </ul>
            </div>
            <div>
                <h4 class="font-bold mb-2">Connect With Us</h4>
                <ul class="flex space-x-4">
                    <li>
                        <a href="https://x.com/AsifJahan16?t=395gkNQRy6uxrRdKF3HqVQ&s=09" target="_blank"
                            rel="noopener noreferrer">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                class="fill-current">
                                <path
                                    d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z">
                                </path>
                            </svg>
                        </a>
                    </li>
                    <li>
                        <a href="https://www.facebook.com/aasif.jahan.9/" target="_blank" rel="noopener noreferrer">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                class="fill-current">
                                <path
                                    d="M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z">
                                </path>
                            </svg>
                        </a>
                    </li>
                    <li>
                        <a href="https://www.instagram.com/__aasiif__/" target="_blank" rel="noopener noreferrer">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                class="fill-current">
                                <path
                                    d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z">
                                </path>
                            </svg>
                        </a>
                    </li>
                    <li>
                        <a href="https://www.linkedin.com/in/asif748?utm_source=share&utm_campaign=share_via&utm_content=profile&utm_medium=android_app"
                            target="_blank" rel="noopener noreferrer">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                class="fill-current">
                                <path d="M16 3h-9v4h9zm0 5h-9v4h9zm0 5h-9v4h9zm0 5h-9v4h9z"></path>
                            </svg>
                        </a>
                    </li>
                </ul>
            </div>
        </div>
        <div class="mt-8 text-center text-sm">
            <script>
                document.write(`© ${new Date().getFullYear()} EveM Events Ltd. All rights reserved.`);
            </script>
            <p>Bringing your events to life with seamless management</p>
        </div>
    </footer>
</body>
</html>
									login-admin.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Admin Login | EveM</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 text-gray-800">

  <div class="min-h-screen flex items-center justify-center">
    <div class="bg-white p-8 rounded shadow-md w-full max-w-md">
      <h2 class="text-2xl font-bold mb-6 text-center text-red-600">Admin Login</h2>

      <!-- ✅ Admin login form -->
      <form id="adminLoginForm" class="space-y-4">
        <input
          type="text"
          id="username"
          placeholder="Username"
          required
          class="border border-gray-300 rounded w-full px-4 py-2"
        />
        <input
          type="password"
          id="password"
          placeholder="Password"
          required
          class="border border-gray-300 rounded w-full px-4 py-2"
        />
        <button
          type="submit"
          class="bg-red-600 text-white px-4 py-2 rounded w-full hover:bg-red-700"
        >
          Log In
        </button>
      </form>

      <p class="text-sm mt-4 text-center text-gray-600">
        Back to <a href="index.html" class="text-indigo-600 hover:underline">Home</a>
      </p>
    </div>
  </div>

  <!-- ✅ Script that handles admin login -->
  <script>
    document.getElementById("adminLoginForm").addEventListener("submit", async function (e) {
      e.preventDefault();

      const username = document.getElementById("username").value;
      const password = document.getElementById("password").value;

      const res = await fetch("http://localhost:3000/login-admin", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password }),
      });

      if (res.ok) {
        const data = await res.json();
        localStorage.setItem("admin", JSON.stringify(data)); // ✅ Save session
        window.location.href = "index.html"; // ✅ Redirect to home
      } else {
        alert("Login failed. Invalid username or password.");
      }
    });
  </script>

</body>
</html>
									admin-dashboard.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Admin Login | EveM</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 text-gray-800">

  <div class="min-h-screen flex items-center justify-center">
    <div class="bg-white p-8 rounded shadow-md w-full max-w-md">
      <h2 class="text-2xl font-bold mb-6 text-center text-red-600">Admin Login</h2>

      <!-- ✅ Admin login form -->
      <form id="adminLoginForm" class="space-y-4">
        <input
          type="text"
          id="username"
          placeholder="Username"
          required
          class="border border-gray-300 rounded w-full px-4 py-2"
        />
        <input
          type="password"
          id="password"
          placeholder="Password"
          required
          class="border border-gray-300 rounded w-full px-4 py-2"
        />
        <button
          type="submit"
          class="bg-red-600 text-white px-4 py-2 rounded w-full hover:bg-red-700"
        >
          Log In
        </button>
      </form>

      <p class="text-sm mt-4 text-center text-gray-600">
        Back to <a href="index.html" class="text-indigo-600 hover:underline">Home</a>
      </p>
    </div>
  </div>

  <!-- ✅ Script that handles admin login -->
  <script>
    document.getElementById("adminLoginForm").addEventListener("submit", async function (e) {
      e.preventDefault();

      const username = document.getElementById("username").value;
      const password = document.getElementById("password").value;

      const res = await fetch("http://localhost:3000/login-admin", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password }),
      });

      if (res.ok) {
        const data = await res.json();
        localStorage.setItem("admin", JSON.stringify(data)); // ✅ Save session
        window.location.href = "index.html"; // ✅ Redirect to home
      } else {
        alert("Login failed. Invalid username or password.");
      }
    });
  </script>

</body>
</html>
								admin-dashboard.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Admin Dashboard | EveM</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    /*simple hover effect for the event cards */
    .event-card-hover:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }
    .event-card-hover {
        transition: transform 0.2s, box-shadow 0.2s;
    }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
 <script>
  const admin = JSON.parse(localStorage.getItem("admin"));
  if (!admin) {
    alert("Unauthorized access.");
    location.href = "login-admin.html";
  }
</script>

<!-- Navbar -->
<header class="bg-white shadow sticky top-0 z-50">
  <div class="container mx-auto px-4 py-4 flex justify-between items-center">

    <!-- Logo + Title -->
    <a href="index.html" class="flex items-center space-x-2 text-2xl font-bold text-indigo-600">
      <img src="assets/icon.png" alt="EveM Logo" class="h-8 w-8">
      <span>EveM</span>
    </a>

    <!-- Navigation Links -->
    <nav class="hidden md:flex space-x-6 text-gray-700 font-medium">
      <a href="index.html" class="hover:text-indigo-600">Home</a>
      <a href="create-event.html" class="hover:text-indigo-600">Event</a>
      <a href="about.html" class="hover:text-indigo-600">About</a>
    </nav>
    <script>
      window.addEventListener("DOMContentLoaded", () => {
        const loginContainer = document.querySelector("#loginButton");
        const admin = JSON.parse(localStorage.getItem("admin"));
        const user = JSON.parse(localStorage.getItem("user"));

        if (admin && loginContainer) {
          loginContainer.innerHTML = `
        <div class="relative">
          <button onclick="toggleDropdown()" class="bg-red-600 text-white px-4 py-2 rounded-full flex items-center space-x-2">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 10a4 4 0 100-8 4 4 0 000 8zm-7 8a7 7 0 0114 0H3z" />
            </svg>
            <span>${admin.username}</span>
          </button>
          <div id="dropdownMenu" class="hidden absolute right-0 mt-2 w-48 bg-white border rounded shadow-md z-50">
            <a href="admin-dashboard.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Admin Dashboard</a>
            <a href="#" onclick="logoutAdmin()" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Logout</a>
          </div>
        </div>
      `;
        } else if (user && loginContainer) {
          loginContainer.innerHTML = `
        <div class="relative">
          <button onclick="toggleDropdown()" class="bg-indigo-600 text-white px-4 py-2 rounded-full flex items-center space-x-2">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 10a4 4 0 100-8 4 4 0 000 8zm-7 8a7 7 0 0114 0H3z" />
            </svg>
            <span>${user.first_name}</span>
          </button>
          <div id="dropdownMenu" class="hidden absolute right-0 mt-2 w-48 bg-white border rounded shadow-md z-50">
            <a href="user-dashboard.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">User Dashboard</a>
            <a href="#" onclick="logoutUser()" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Logout</a>
          </div>
        </div>
      `;
        }
      });

      function logoutAdmin() {
        localStorage.removeItem("admin");
        location.href = "index.html";
      }

      function logoutUser() {
        localStorage.removeItem("user");
        location.href = "index.html";
      }

      function toggleDropdown() {
        const menu = document.getElementById("dropdownMenu");
        if (menu) menu.classList.toggle("hidden");
      }

      // Close on outside click
      document.addEventListener("click", function (e) {
        const dropdown = document.getElementById("dropdownMenu");
        const button = e.target.closest("button");
        if (dropdown && !dropdown.contains(e.target) && !button) {
          dropdown.classList.add("hidden");
        }
      });
    </script>
    <!-- Search Box -->
    <div class="relative hidden md:flex">
      <input type="text" placeholder="Search "
        class="border-2 border-indigo-500 rounded-full pl-10 pr-4 py-2 text-gray-700 w-64 focus:outline-none focus:ring-2 focus:ring-indigo-400" />
      <svg class="absolute left-3 top-3 text-gray-500 w-4 h-4" fill="none" stroke="currentColor" stroke-width="2"
        viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-4.35-4.35M17 11a6 6 0 11-12 0 6 6 0 0112 0z" />
      </svg>
    </div>

    <!-- Login/Signup Dropdown -->
    <div class="relative" id="loginButton">
      <button onclick="toggleDropdown()"
        class="bg-indigo-600 text-white px-4 py-2 rounded-full hover:bg-indigo-700 flex items-center space-x-2">
        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
          <path d="M10 10a4 4 0 100-8 4 4 0 000 8zm-7 8a7 7 0 0114 0H3z" />
        </svg>
        <span>Log In / Sign Up</span>
      </button>
      <div id="dropdownMenu" class="hidden absolute right-0 mt-2 w-48 bg-white border rounded shadow-md z-50">
        <a href="login-user.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">User Login</a>
        <a href="login-admin.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Admin Login</a>
        <a href="signup.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Sign Up</a>
      </div>
    </div>
  </div>


</header>

<!-- Red Header -->
<header class="bg-red-600 text-white px-6 py-4 flex justify-between items-center">
  <h1 class="text-xl font-bold">Admin Dashboard</h1>
  <a href="index.html" class="text-sm bg-white text-red-600 px-3 py-1 rounded">View Site</a>
</header>

<main class="container mx-auto p-6 space-y-8">
  <section>
    <div class="flex justify-between items-center mb-6">
      <h2 class="text-3xl font-bold text-red-700">Welcome, <span id="adminUsername">Admin</span>!</h2>
    </div>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
      <div class="bg-white p-6 rounded-lg shadow-md border-l-4 border-red-500 flex items-center justify-between">
        <div>
          <p class="text-gray-500 text-sm">Total Events</p>
          <p id="totalEvents" class="text-2xl font-bold text-gray-900">...</p>
        </div>
        <svg class="w-8 h-8 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg>
      </div>
      <div class="bg-white p-6 rounded-lg shadow-md border-l-4 border-indigo-500 flex items-center justify-between">
        <div>
          <p class="text-gray-500 text-sm">Registered Users</p>
          <p id="totalUsers" class="text-2xl font-bold text-gray-900">...</p>
        </div>
        <svg class="w-8 h-8 text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21v-1a4 4 0 00-4-4H9a4 4 0 00-4 4v1m0-10a4 4 0 110-5.292m2.414 1.414a4 4 0 115.656 5.656m-5.656-5.656l5.656 5.656"></path></svg>
      </div>
      <div class="bg-white p-6 rounded-lg shadow-md border-l-4 border-yellow-500 flex items-center justify-between">
        <div>
          <p class="text-gray-500 text-sm">Total Payments</p>
          <p id="totalPayments" class="text-2xl font-bold text-gray-900">...</p>
        </div>
        <svg class="w-8 h-8 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2z"></path></svg>
      </div>
      <div class="bg-white p-6 rounded-lg shadow-md border-l-4 border-purple-500 flex items-center justify-between">
        <div>
          <p class="text-gray-500 text-sm">Total Feedbacks</p>
          <p id="totalFeedbacks" class="text-2xl font-bold text-gray-900">...</p>
        </div>
        <svg class="w-8 h-8 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path></svg>
      </div>
    </div>
  </section>

  <section class="bg-white p-6 rounded-lg shadow-md">
    <h2 class="text-2xl font-bold text-red-700 mb-4">Manage Events</h2>
    <div id="eventListContainer" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <p class="text-center text-gray-500 col-span-full">Loading events...</p>
    </div>
  </section>

  <section class="bg-white p-6 rounded-lg shadow-md">
    <h2 class="text-2xl font-bold text-red-700 mb-4">Manage Vendors</h2>
    <form id="vendorForm" class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6 items-end">
      <input type="hidden" id="vendorId">
      <input type="text" id="firstName" placeholder="First Name" required class="border p-2 rounded">
      <input type="text" id="lastName" placeholder="Last Name" required class="border p-2 rounded">
      <input type="text" id="service" placeholder="Service" class="border p-2 rounded">
      <input type="text" id="phone" placeholder="Phone" class="border p-2 rounded">
      <input type="email" id="email" placeholder="Email" required class="border p-2 rounded">
      <button type="submit" class="bg-red-600 text-white p-2 rounded hover:bg-red-700 transition">Save Vendor</button>
    </form>
    <table class="w-full text-left border-collapse">
      <thead>
        <tr class="bg-gray-100 text-gray-600">
          <th class="p-3 border-b">Name</th>
          <th class="p-3 border-b">Service</th>
          <th class="p-3 border-b">Contact</th>
          <th class="p-3 border-b">Actions</th>
        </tr>
      </thead>
      <tbody id="vendorTable">
        <tr><td class="p-3 text-gray-500" colspan="4">Loading vendors...</td></tr>
      </tbody>
    </table>
  </section>

  <section class="bg-white p-6 rounded-lg shadow-md">
    <h2 class="text-2xl font-bold text-red-700 mb-4">Manage Organizers</h2>
    <form id="organizerForm" class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6 items-end">
      <input type="hidden" id="organizerId">
      <input type="text" id="orgFirstName" placeholder="First Name" required class="border p-2 rounded">
      <input type="text" id="orgLastName" placeholder="Last Name" required class="border p-2 rounded">
      <input type="text" id="company" placeholder="Company" class="border p-2 rounded">
      <input type="text" id="orgPhone" placeholder="Phone" class="border p-2 rounded">
      <input type="email" id="orgEmail" placeholder="Email" required class="border p-2 rounded">
      <button type="submit" class="bg-red-600 text-white p-2 rounded hover:bg-red-700 transition">Save Organizer</button>
    </form>
    <table class="w-full text-left border-collapse">
      <thead>
        <tr class="bg-gray-100 text-gray-600">
          <th class="p-3 border-b">Name</th>
          <th class="p-3 border-b">Company</th>
          <th class="p-3 border-b">Contact</th>
          <th class="p-3 border-b">Actions</th>
        </tr>
      </thead>
      <tbody id="organizerTable">
        <tr><td class="p-3 text-gray-500" colspan="4">Loading organizers...</td></tr>
      </tbody>
    </table>
  </section>

</main>
<script>
  // Function to load the summary data
  async function loadSummaryData() {
    try {
      const response = await fetch('http://localhost:3000/admin/dashboard-summary');
      if (!response.ok) throw new Error('Failed to fetch summary data.');
      const data = await response.json();
      document.getElementById('totalEvents').textContent = data.totalEvents;
      document.getElementById('totalUsers').textContent = data.totalUsers;
      document.getElementById('totalPayments').textContent = `$${data.totalPayments.toLocaleString()}`;
      document.getElementById('totalFeedbacks').textContent = data.totalFeedbacks;
    } catch (error) {
      console.error('Error loading summary data:', error);
      // Fallback to dummy data on error
      document.getElementById('totalEvents').textContent = 'N/A';
      document.getElementById('totalUsers').textContent = 'N/A';
      document.getElementById('totalPayments').textContent = 'N/A';
      document.getElementById('totalFeedbacks').textContent = 'N/A';
    }
  }

  // Function to load and display all events
  async function loadEvents() {
    const container = document.getElementById('eventListContainer');
    try {
      const response = await fetch('http://localhost:3000/admin/events');
      if (!response.ok) throw new Error('Failed to fetch events.');
      const events = await response.json();

      container.innerHTML = ''; // Clear loading message
      if (events.length === 0) {
        container.innerHTML = '<p class="text-center text-gray-500 col-span-full">No events have been created yet.</p>';
        return;
      }

      events.forEach(event => {
        const eventCard = document.createElement('div');
        eventCard.className = 'event-card-hover bg-white p-6 rounded-lg shadow-md flex flex-col justify-between';
        
        let statusBadge;
        let actionButton;

        if (event.is_approved) {
            statusBadge = `<span class="bg-green-100 text-green-800 text-xs font-semibold px-2.5 py-0.5 rounded-full">Approved</span>`;
            actionButton = `<button onclick="deleteEvent(${event.id})" class="bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600 transition">Delete</button>`;
        } else if (event.is_paid) {
            statusBadge = `<span class="bg-yellow-100 text-yellow-800 text-xs font-semibold px-2.5 py-0.5 rounded-full">Payment Received</span>`;
            actionButton = `<button onclick="approveEvent(${event.id})" class="bg-green-500 text-white px-3 py-1 rounded text-sm hover:bg-green-600 transition">Approve</button>`;
        } else {
            statusBadge = `<span class="bg-gray-100 text-gray-800 text-xs font-semibold px-2.5 py-0.5 rounded-full">Pending Payment</span>`;
            actionButton = `<button onclick="deleteEvent(${event.id})" class="bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600 transition">Delete</button>`;
        }

        eventCard.innerHTML = `
          <div>
            <h3 class="text-xl font-bold text-gray-900">${event.name}</h3>
            <p class="text-sm text-gray-500 mt-1">Organizer: ${event.organizer_name}</p>
            <p class="text-sm text-gray-500">Date: ${new Date(event.start_date).toLocaleDateString()}</p>
            <p class="text-gray-700 mt-2">${event.description.substring(0, 100)}...</p>
          </div>
          <div class="mt-4 flex items-center justify-between">
            ${statusBadge}
            ${actionButton}
          </div>
        `;
        container.appendChild(eventCard);
      });
    } catch (error) {
      console.error("Error loading events:", error);
      container.innerHTML = `<p class="text-center text-red-500 col-span-full">Error loading events. Please ensure the server is running.</p>`;
    }
  }

  // Admin approval function
  async function approveEvent(eventId) {
    if (confirm("Are you sure you want to approve this event?")) {
      try {
        const response = await fetch(`http://localhost:3000/admin/events/approve/${eventId}`, {
          method: 'PUT'
        });
        if (!response.ok) {
          throw new Error('Failed to approve event.');
        }
        alert("Event approved successfully!");
        loadEvents(); // Reload events to show the updated status
      } catch (error) {
        console.error('Approval failed:', error);
        alert(`Approval failed: ${error.message}`);
      }
    }
  }

  // Admin delete function
  async function deleteEvent(eventId) {
    if (confirm("Are you sure you want to delete this event?")) {
      try {
        const response = await fetch(`http://localhost:3000/admin/events/${eventId}`, {
          method: 'DELETE'
        });
        if (!response.ok) {
          throw new Error('Failed to delete event.');
        }
        alert("Event deleted successfully!");
        loadEvents(); // Reload events to show the updated list
      } catch (error) {
        console.error('Deletion failed:', error);
        alert(`Deletion failed: ${error.message}`);
      }
    }
  }

  // Vendor Management Functions
  const vendorForm = document.getElementById('vendorForm');
  const vendorTable = document.getElementById('vendorTable');

  async function fetchVendors() {
    try {
      const res = await fetch('http://localhost:3000/admin/vendors');
      if (!res.ok) throw new Error('Failed to fetch vendors.');
      const vendors = await res.json();
      vendorTable.innerHTML = vendors.map(v => `
        <tr class="border-b hover:bg-gray-50">
          <td class="p-3">${v.first_name} ${v.last_name}</td>
          <td class="p-3">${v.service || ''}</td>
          <td class="p-3">${v.phone || ''} / ${v.email}</td>
          <td class="p-3">
            <button onclick="editVendor(${v.id}, '${v.first_name}', '${v.last_name}', '${v.service || ''}', '${v.phone || ''}', '${v.email}')" class="bg-yellow-400 text-gray-800 px-2 py-1 rounded text-sm hover:bg-yellow-500 transition">Edit</button>
            <button onclick="deleteVendor(${v.id})" class="bg-red-500 text-white px-2 py-1 rounded text-sm hover:bg-red-600 transition">Delete</button>
          </td>
        </tr>
      `).join('');
    } catch (error) {
      console.error('Error fetching vendors:', error);
      vendorTable.innerHTML = `<tr><td class="p-3 text-red-500" colspan="4">Error loading vendors.</td></tr>`;
    }
  }

  vendorForm.onsubmit = async e => {
    e.preventDefault();
    const id = document.getElementById('vendorId').value;
    const vendor = {
      first_name: document.getElementById('firstName').value.trim(),
      last_name: document.getElementById('lastName').value.trim(),
      service: document.getElementById('service').value.trim(),
      phone: document.getElementById('phone').value.trim(),
      email: document.getElementById('email').value.trim()
    };

    const method = id ? 'PUT' : 'POST';
    const url = id ? `http://localhost:3000/admin/vendors/${id}` : 'http://localhost:3000/admin/vendors';

    try {
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(vendor)
      });
      if (!response.ok) {
        const err = await response.text();
        throw new Error(err);
      }
      alert(id ? "✅ Vendor updated!" : "✅ Vendor added!");
      vendorForm.reset();
      document.getElementById('vendorId').value = '';
      fetchVendors();
    } catch (error) {
      alert("❌ Error: " + error.message);
    }
  };

  function editVendor(id, first, last, service, phone, email) {
    document.getElementById('vendorId').value = id;
    document.getElementById('firstName').value = first;
    document.getElementById('lastName').value = last;
    document.getElementById('service').value = service;
    document.getElementById('phone').value = phone;
    document.getElementById('email').value = email;
    // Scroll to the form
    vendorForm.scrollIntoView({ behavior: 'smooth' });
  }

  async function deleteVendor(id) {
    if (confirm("Are you sure you want to delete this vendor?")) {
      try {
        const response = await fetch(`http://localhost:3000/admin/vendors/${id}`, { method: 'DELETE' });
        if (!response.ok) throw new Error('Deletion failed.');
        alert("✅ Vendor deleted!");
        fetchVendors();
      } catch (error) {
        alert("❌ Error: " + error.message);
      }
    }
  }

  // Organizer Management Functions
  const orgForm = document.getElementById('organizerForm');
  const organizerTable = document.getElementById('organizerTable');

  async function fetchOrganizers() {
    try {
      const res = await fetch('http://localhost:3000/admin/organizers');
      if (!res.ok) throw new Error('Failed to fetch organizers.');
      const organizers = await res.json();
      organizerTable.innerHTML = organizers.map(o => `
        <tr class="border-b hover:bg-gray-50">
          <td class="p-3">${o.first_name} ${o.last_name}</td>
          <td class="p-3">${o.company || ''}</td>
          <td class="p-3">${o.phone || ''} / ${o.email}</td>
          <td class="p-3">
            <button onclick="editOrganizer(${o.id}, '${o.first_name}', '${o.last_name}', '${o.company || ''}', '${o.phone || ''}', '${o.email}')" class="bg-yellow-400 text-gray-800 px-2 py-1 rounded text-sm hover:bg-yellow-500 transition">Edit</button>
            <button onclick="deleteOrganizer(${o.id})" class="bg-red-500 text-white px-2 py-1 rounded text-sm hover:bg-red-600 transition">Delete</button>
          </td>
        </tr>
      `).join('');
    } catch (error) {
      console.error('Error fetching organizers:', error);
      organizerTable.innerHTML = `<tr><td class="p-3 text-red-500" colspan="4">Error loading organizers.</td></tr>`;
    }
  }

  orgForm.onsubmit = async e => {
    e.preventDefault();
    const id = document.getElementById('organizerId').value;
    const organizer = {
      first_name: document.getElementById('orgFirstName').value.trim(),
      last_name: document.getElementById('orgLastName').value.trim(),
      company: document.getElementById('company').value.trim(),
      phone: document.getElementById('orgPhone').value.trim(),
      email: document.getElementById('orgEmail').value.trim()
    };

    const method = id ? 'PUT' : 'POST';
    const url = id ? `http://localhost:3000/admin/organizers/${id}` : 'http://localhost:3000/admin/organizers';

    try {
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(organizer)
      });
      if (!response.ok) {
        const err = await response.text();
        throw new Error(err);
      }
      alert(id ? "✅ Organizer updated!" : "✅ Organizer added!");
      orgForm.reset();
      document.getElementById('organizerId').value = '';
      fetchOrganizers();
    } catch (error) {
      alert("❌ Error: " + error.message);
    }
  };

  function editOrganizer(id, first, last, company, phone, email) {
    document.getElementById('organizerId').value = id;
    document.getElementById('orgFirstName').value = first;
    document.getElementById('orgLastName').value = last;
    document.getElementById('company').value = company;
    document.getElementById('orgPhone').value = phone;
    document.getElementById('orgEmail').value = email;
    // Scroll to the form
    orgForm.scrollIntoView({ behavior: 'smooth' });
  }

  async function deleteOrganizer(id) {
    if (confirm("Are you sure you want to delete this organizer?")) {
      try {
        const response = await fetch(`http://localhost:3000/admin/organizers/${id}`, { method: 'DELETE' });
        if (!response.ok) throw new Error('Deletion failed.');
        alert("✅ Organizer deleted!");
        fetchOrganizers();
      } catch (error) {
        alert("❌ Error: " + error.message);
      }
    }
  }

  // Initialize all data on page load
  document.addEventListener('DOMContentLoaded', () => {
    const admin = JSON.parse(localStorage.getItem('admin'));
    if (admin) {
        document.getElementById('adminUsername').textContent = admin.username;
        loadSummaryData();
        loadEvents();
        fetchVendors();
        fetchOrganizers();
    }
  });
</script>
</body>
</html>
									Server.js
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const mysql = require('mysql2/promise'); // <--- IMPORTANT: Using mysql2/promise for async/await
const bcrypt = require('bcryptjs');

const app = express();
app.use(cors());
app.use(express.json());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// --- Database connection pool ---
// Use mysql2/promise.createPool for promise-based operations
const pool = mysql.createPool({ // <--- 'pool' is now defined here
    host: 'localhost',
    user: 'root',
    password: '', // <--- Set your MySQL password here
    database: 'event_management',
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0
});

// Test database connection
pool.getConnection()
    .then(connection => {
        console.log('Successfully connected to the MySQL database using pool!');
        connection.release(); // Release the connection
    })
    .catch(err => {
        console.error('Error connecting to the database pool:', err.message);
        process.exit(1); // Exit the process if database connection fails
    });

// --- ROUTES ---

// User Signup
app.post('/signup', async (req, res) => { // Added async
    const { first_name, last_name, email, phone, password } = req.body;

    const insertUser = `
        INSERT INTO users (first_name, last_name, email, phone, password)
        VALUES (?, ?, ?, ?, ?)
    `;

    try {
        await pool.execute(insertUser, [first_name, last_name, email, phone, password]); // Using pool.execute
        res.send("User signup successful");
    } catch (err) {
        console.error("Signup DB error:", err);
        res.status(500).send("Error inserting user");
    }
});

// User Login
app.post('/login', async (req, res) => { // Added async
    const { email, password } = req.body;
    try {
        const [results] = await pool.execute("SELECT * FROM users WHERE email = ?", [email]); // Using pool.execute
        if (results.length === 0) return res.status(401).send("Invalid login");

        const user = results[0];
        // IMPORTANT: For production, use bcrypt.compare(password, user.password) here
        if (password === user.password) { // Plaintext comparison for now
            res.send({ message: "Login successful", user: user });
        } else {
            res.status(401).send("Incorrect password");
        }
    } catch (err) {
        console.error("Login DB error:", err);
        res.status(500).send("Server error");
    }
});

// Admin Login
app.post("/login-admin", async (req, res) => { // Added async
    const { username, password } = req.body;

    const query = "SELECT * FROM admins WHERE username = ?";
    try {
        const [results] = await pool.execute(query, [username]); // Using pool.execute
        if (results.length === 0) return res.status(401).send("Unauthorized");

        const admin = results[0];
        // IMPORTANT: For production, use bcrypt.compare(password, admin.password) here
        if (password !== admin.password) { // Plaintext comparison for now
            return res.status(401).send("Unauthorized");
        }

        res.json({ id: admin.id, username: admin.username });
    } catch (err) {
        console.error("Admin Login DB error:", err);
        res.status(500).send("Server error");
    }
});

// Get all events
app.get('/events', async (req, res) => { // Added async
    try {
        const [results] = await pool.execute("SELECT * FROM events"); // Using pool.execute
        res.json(results);
    } catch (err) {
        console.error("Fetch events error:", err);
        res.status(500).send(err);
    }
});

// Create new event
app.post('/events', async (req, res) => {
    const {
        userId,
        name,
        description,
        categoryId,
        venueId,
        startDate,
        endDate,
        startTime,
        endTime,
        organizerId,
        vendorId,
        visibility,
        maxAttendees,
        ticketPrice,
        budget
    } = req.body;

    if (!userId || !name || !description || !categoryId || !venueId || !startDate || !endDate || !startTime || !endTime || !organizerId || !visibility) {
        return res.status(400).json({ message: 'Missing required event fields.' });
    }

    try {
        const [result] = await pool.execute( // Using pool.execute
            `INSERT INTO events (user_id, name, description, category_id, venue_id, start_date, end_date, start_time, end_time, organizer_id, vendor_id, visibility, max_attendees, ticket_price, budget)
             VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
                userId,
                name,
                description,
                categoryId,
                venueId,
                startDate,
                endDate,
                startTime,
                endTime,
                organizerId,
                vendorId || null,
                visibility,
                maxAttendees || null,
                ticketPrice || null,
                budget || null
            ]
        );

        res.status(201).json({ message: 'Event created successfully!', eventId: result.insertId });
    } catch (error) {
        console.error('Error creating event:', error);
        if (error.code === 'ER_NO_REFERENCED_ROW_2') {
            return res.status(400).json({ message: 'Invalid category, venue, organizer, or vendor ID. Please ensure these IDs exist in your database.' });
        }
        res.status(500).json({ message: 'Internal server error: Database insert failed.', details: error.message });
    }
});


// Get all events for a specific user, with payment status
app.get('/events/user/:userId', async (req, res) => {
    const { userId } = req.params;
    try {
        // This query now includes a LEFT JOIN with the payments table
        // to check if a payment exists for each event.
        const [rows] = await pool.execute(`
            SELECT 
                e.*,
                CASE WHEN p.event_id IS NOT NULL THEN TRUE ELSE FALSE END AS is_paid
            FROM events e
            LEFT JOIN payments p ON e.id = p.event_id
            WHERE e.user_id = ?
        `, [userId]);
        res.json(rows);
    } catch (err) {
        console.error('Error fetching user events:', err);
        res.status(500).json({ message: 'Error fetching user events' });
    }
});

// Get a single event by ID
app.get('/events/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const [rows] = await pool.execute('SELECT * FROM events WHERE id = ?', [id]);
        if (rows.length === 0) {
            return res.status(404).json({ message: 'Event not found' });
        }
        res.json(rows[0]);
    } catch (err) {
        console.error('Error fetching event:', err);
        res.status(500).json({ message: 'Error fetching event' });
    }
});

// Update an event by ID
app.put('/events/:id', async (req, res) => {
    const { id } = req.params;
    const {
        name, description, categoryId, venueId, startDate, endDate, startTime, endTime,
        organizerId, vendorId, visibility, maxAttendees, ticketPrice, budget
    } = req.body;

    // Validate that required fields are present
    if (!name || !description || !categoryId || !venueId || !startDate || !endDate || !startTime || !endTime || !organizerId || !visibility) {
        return res.status(400).json({ message: 'Please provide all required event details.' });
    }

    try {
        const [result] = await pool.execute(
            'UPDATE events SET name = ?, description = ?, category_id = ?, venue_id = ?, start_date = ?, end_date = ?, start_time = ?, end_time = ?, organizer_id = ?, vendor_id = ?, visibility = ?, max_attendees = ?, ticket_price = ?, budget = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?',
            [name, description, categoryId, venueId, startDate, endDate, startTime, endTime, organizerId, vendorId, visibility, maxAttendees, ticketPrice, budget, id]
        );
        
        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'Event not found or no changes made.' });
        }

        res.status(200).json({ message: 'Event updated successfully.' });

    } catch (err) {
        console.error('Error updating event:', err);
        res.status(500).json({ message: 'Failed to update event' });
    }
});

// Delete event
app.delete('/events/:id', async (req, res) => { // Added async
    try {
        await pool.execute("DELETE FROM events WHERE id = ?", [req.params.id]); // Using pool.execute
        res.send("Event deleted");
    } catch (err) {
        console.error("Delete event error:", err);
        res.status(500).send(err);
    }
});

// New POST route to handle payments for events
app.post("/payments", async (req, res) => {
    const { event_id, method, account_info, amount } = req.body;

    if (!event_id || !method || !account_info || !amount) {
        return res.status(400).json({ message: "Missing required payment information." });
    }

    try {
        // Optional: Validate if the event_id exists
        const [eventRows] = await pool.execute(
            `SELECT id FROM events WHERE id = ?`,
            [event_id]
        );

        if (eventRows.length === 0) {
            return res.status(404).json({ message: "Invalid event ID. Event not found." });
        }

        const [result] = await pool.execute(
            'INSERT INTO payments (event_id, method, account_info, amount) VALUES (?, ?, ?, ?)',
            [event_id, method, account_info, amount]
        );

        res.status(201).json({ message: 'Payment recorded successfully!', paymentId: result.insertId });

    } catch (err) {
        console.error('Error processing payment:', err);
        res.status(500).json({ message: 'Failed to process payment.', details: err.message });
    }
});

// New GET route to fetch a single payment by its ID, with event details
app.get("/payments/:id", async (req, res) => {
    const paymentId = req.params.id;

    try {
        const [rows] = await pool.execute(
            `SELECT 
                p.id, 
                p.amount, 
                p.transaction_date, 
                p.method, 
                p.account_info, 
                e.name AS event_name 
            FROM payments p
            JOIN events e ON p.event_id = e.id
            WHERE p.id = ?`,
            [paymentId]
        );

        if (rows.length === 0) {
            return res.status(404).json({ message: "Payment not found." });
        }

        res.status(200).json(rows[0]);

    } catch (err) {
        console.error('Error fetching payment details:', err);
        res.status(500).json({ message: 'Failed to retrieve payment details.', details: err.message });
    }
});


// GET all categories
app.get('/categories', async (req, res) => {
    try {
        const [rows] = await pool.execute('SELECT id, name FROM categories');
        res.json(rows);
    } catch (error) {
        console.error('Error fetching categories:', error);
        res.status(500).json({ message: 'Error fetching categories.', details: error.message });
    }
});

// Get Venues
app.get('/venues', async (req, res) => {
    try {
        const [rows] = await pool.execute('SELECT id, name, location FROM venues');
        res.json(rows);
    } catch (error) {
        console.error('Error fetching venues:', error);
        res.status(500).json({ message: 'Error fetching venues.', details: error.message });
    }
});

// --- ADMIN DASHBOARD ROUTES ---

// Admin: Get all events with organizer names and payment status
app.get('/admin/events', async (req, res) => {
    try {
        const [rows] = await pool.execute(`
            SELECT
                e.*,
                CONCAT(o.first_name, ' ', o.last_name) AS organizer_name,
                CASE WHEN p.event_id IS NOT NULL THEN TRUE ELSE FALSE END AS is_paid,
                e.is_approved -- Ensure is_approved is selected
            FROM events e
            LEFT JOIN organizers o ON e.organizer_id = o.id
            LEFT JOIN payments p ON e.id = p.event_id
        `);
        res.status(200).json(rows);
    } catch (err) {
        console.error('Error fetching all events for admin:', err);
        res.status(500).json({ message: 'Failed to retrieve events.', details: err.message });
    }
});

// Admin: Get dashboard summary data
app.get('/admin/dashboard-summary', async (req, res) => {
    try {
        const [totalEvents] = await pool.execute('SELECT COUNT(*) AS count FROM events');
        const [totalUsers] = await pool.execute('SELECT COUNT(*) AS count FROM users');
        const [totalPayments] = await pool.execute('SELECT SUM(amount) AS total FROM payments');
        // Assuming you have a 'feedbacks' table. If not, remove this line or create the table.
        const [totalFeedbacks] = await pool.execute('SELECT COUNT(*) AS count FROM feedback'); // Changed to 'feedback' (singular)

        res.status(200).json({
            totalEvents: totalEvents[0].count,
            totalUsers: totalUsers[0].count,
            totalPayments: totalPayments[0].total || 0,
            totalFeedbacks: totalFeedbacks[0].count
        });
    } catch (err) {
        console.error('Error fetching dashboard summary:', err);
        res.status(500).json({ message: 'Failed to retrieve summary data.', details: err.message });
    }
});


// Admin: Get all vendors (dedicated admin route)
// This route was commented out in your provided code, now uncommented for admin dashboard
app.get('/admin/vendors', async (req, res) => {
    try {
        const [results] = await pool.execute('SELECT * FROM vendors');
        res.json(results);
    } catch (err) {
        console.error('Fetch vendors error:', err);
        res.status(500).send('Error fetching vendors'); // Consistent with your existing /vendors error handling
    }
});

// Admin: Add new vendor (existing logic, preserved response)
app.post('/admin/vendors', async (req, res) => {
    const { first_name, last_name, service, phone, email } = req.body;

    if (!first_name || !last_name || !email) {
        return res.status(400).send("First name, last name, and email are required");
    }

    const query = `
        INSERT INTO vendors (first_name, last_name, service, phone, email)
        VALUES (?, ?, ?, ?, ?)
    `;

    try {
        await pool.execute(query, [first_name, last_name, service, phone, email]);
        res.send("Vendor added");
    } catch (err) {
        if (err.code === 'ER_DUP_ENTRY') {
            return res.status(400).send("Email already exists");
        }
        console.error('Insert vendor failed:', err);
        res.status(500).send("Insert failed");
    }
});

// Admin: Update vendor (existing logic, preserved response)
app.put('/admin/vendors/:id', async (req, res) => {
    const { first_name, last_name, service, phone, email } = req.body;

    if (!first_name || !last_name || !email) {
        return res.status(400).send("First name, last name, and email are required");
    }

    const query = `
        UPDATE vendors SET first_name=?, last_name=?, service=?, phone=?, email=? 
        WHERE id=?
    `;

    try {
        const [result] = await pool.execute(query, [first_name, last_name, service, phone, email, req.params.id]);
        if (result.affectedRows === 0) {
            return res.status(404).send("Vendor not found."); // Added 404 for clarity
        }
        res.send("Vendor updated");
    } catch (err) {
        if (err.code === 'ER_DUP_ENTRY') {
            return res.status(400).send("Email already exists");
        }
        console.error('Update vendor failed:', err);
        res.status(500).send("Update failed");
    }
});

// Admin: Delete vendor (existing logic, preserved response)
app.delete('/admin/vendors/:id', async (req, res) => {
    const vendorId = req.params.id;

    try {
        const [deleteResult] = await pool.execute("DELETE FROM vendors WHERE id=?", [vendorId]);

        if (deleteResult.affectedRows === 0) {
            return res.status(404).send("Vendor not found."); // Added 404 for clarity
        }

        const [results] = await pool.execute("SELECT COUNT(*) AS total FROM vendors");
        const total = results[0].total;

        if (total === 0) {
            await pool.execute("ALTER TABLE vendors AUTO_INCREMENT = 1");
            res.send("Vendor deleted and ID reset");
        } else {
            res.send("Vendor deleted");
        }
    } catch (err) {
        console.error('Delete vendor failed:', err);
        res.status(500).send("Delete failed");
    }
});


// Admin: Get all organizers (dedicated admin route)
// This is a new dedicated route for the admin dashboard
app.get('/admin/organizers', async (req, res) => {
    try {
        const [results] = await pool.execute('SELECT * FROM organizers');
        res.json(results);
    } catch (err) {
        console.error('Fetch organizers error:', err);
        res.status(500).send('Error fetching organizers'); // Consistent with your existing /organizers error handling
    }
});

// Admin: Add new organizer (existing logic, preserved response)
app.post('/admin/organizers', async (req, res) => {
    const { first_name, last_name, company, phone, email } = req.body;

    if (!first_name || !last_name || !email) {
        return res.status(400).send("First name, last name, and email are required");
    }

    const query = `
        INSERT INTO organizers (first_name, last_name, company, phone, email)
        VALUES (?, ?, ?, ?, ?)
    `;

    try {
        await pool.execute(query, [first_name, last_name, company, phone, email]);
        res.send("Organizer added");
    } catch (err) {
        if (err.code === 'ER_DUP_ENTRY') {
            return res.status(400).send("Email already exists");
        }
        console.error('Insert organizer failed:', err);
        res.status(500).send("Insert failed");
    }
});

// Admin: Update organizer (existing logic, preserved response)
app.put('/admin/organizers/:id', async (req, res) => {
    const { first_name, last_name, company, phone, email } = req.body;

    if (!first_name || !last_name || !email) {
        return res.status(400).send("First name, last name, and email are required");
    }

    const query = `
        UPDATE organizers SET first_name=?, last_name=?, company=?, phone=?, email=? 
        WHERE id=?
    `;

    try {
        const [result] = await pool.execute(query, [first_name, last_name, company, phone, email, req.params.id]);
        if (result.affectedRows === 0) {
            return res.status(404).send("Organizer not found."); // Added 404 for clarity
        }
        res.send("Organizer updated");
    } catch (err) {
        if (err.code === 'ER_DUP_ENTRY') {
            return res.status(400).send("Email already exists");
        }
        console.error('Update organizer failed:', err);
        res.status(500).send("Update failed");
    }
});

// Admin: Delete organizer (existing logic, preserved response)
app.delete('/admin/organizers/:id', async (req, res) => {
    const organizerId = req.params.id;

    try {
        const [deleteResult] = await pool.execute("DELETE FROM organizers WHERE id=?", [organizerId]);

        if (deleteResult.affectedRows === 0) {
            return res.status(404).send("Organizer not found."); // Added 404 for clarity
        }

        const [results] = await pool.execute("SELECT COUNT(*) AS total FROM organizers");
        const total = results[0].total;

        if (total === 0) {
            await pool.execute("ALTER TABLE organizers AUTO_INCREMENT = 1");
            res.send("Organizer deleted and ID reset");
        } else {
            res.send("Organizer deleted");
        }
    } catch (err) {
        console.error('Delete organizer failed:', err);
        res.status(500).send("Delete failed");
    }
});

// Admin: Approve a paid event
app.put('/admin/events/approve/:id', async (req, res) => {
    const eventId = req.params.id;
    try {
        const [result] = await pool.execute(
            'UPDATE events SET is_approved = TRUE WHERE id = ?',
            [eventId]
        );
        if (result.affectedRows === 0) {
            return res.status(404).send('Event not found.'); // Consistent response type
        }
        res.send('Event approved successfully!'); // Consistent response type
    } catch (err) {
        console.error('Error approving event:', err);
        res.status(500).send('Failed to approve event.'); // Consistent response type
    }
});

// Admin: Delete an event
app.delete('/admin/events/:id', async (req, res) => {
    const eventId = req.params.id;
    try {
        const [result] = await pool.execute('DELETE FROM events WHERE id = ?', [eventId]);
        if (result.affectedRows === 0) {
            return res.status(404).send('Event not found.'); // Consistent response type
        }
        res.send('Event deleted successfully!'); // Consistent response type
    } catch (err) {
        console.error('Error deleting event:', err);
        res.status(500).send('Failed to delete event.'); // Consistent response type
    }
});

// New route to handle feedback submission
app.post('/feedback', async (req, res) => {
    const { user_id, event_id, comment, rating } = req.body;

    if (!user_id || !rating) {
        return res.status(400).json({ message: 'Missing required feedback information (user_id, rating).' });
    }

    if (rating < 1 || rating > 5) {
        return res.status(400).json({ message: 'Rating must be between 1 and 5.' });
    }

    try {
        const [result] = await pool.execute(
            'INSERT INTO feedback (user_id, event_id, rating, comment) VALUES (?, ?, ?, ?)',
            [user_id, event_id || null, rating, comment]
        );

        res.status(201).json({ message: 'Feedback submitted successfully!', feedbackId: result.insertId });
    } catch (err) {
        console.error('Error submitting feedback:', err);
        res.status(500).json({ message: 'Failed to submit feedback.', details: err.message });
    }
});

// New GET route to fetch all payments for a specific user
app.get('/payments/user/:userId', async (req, res) => {
    const userId = req.params.userId;
    try {
        const [rows] = await pool.execute(
            `SELECT 
                p.id, 
                p.amount, 
                p.transaction_date, 
                p.method, 
                e.name AS event_name 
            FROM payments p
            JOIN events e ON p.event_id = e.id
            WHERE e.user_id = ? -- Assuming payments are made by the event creator for their own events
            ORDER BY p.transaction_date DESC`,
            [userId]
        );
        res.status(200).json(rows);
    } catch (err) {
        console.error('Error fetching user payments:', err);
        res.status(500).json({ message: 'Failed to retrieve user payments.', details: err.message });
    }
});
app.get('/organizers', async (req, res) => { 
    try { 
        const [results] = await pool.execute('SELECT * FROM organizers'); 
        res.json(results); 
    } catch (err) { 
        console.error('Fetch organizers error:', err); 
        res.status(500).send('Error fetching organizers'); 
    } 
}); 
app.get('/vendors', async (req, res) => { 
    try { 
        const [results] = await pool.execute('SELECT * FROM vendors'); 
        res.json(results); 
    } catch (err) { 
        console.error('Fetch vendors error:', err); 
        res.status(500).send('Error fetching vendors'); 
    } 
}); 

// Server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
